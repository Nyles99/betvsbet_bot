from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
import logging

from database import db
from config_bot import config
from keyboards import get_main_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
from aiogram.dispatcher.filters.state import State, StatesGroup

class AdminStates(StatesGroup):
    waiting_for_ban_user = State()
    waiting_for_unban_user = State()
    waiting_for_user_search = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID

async def check_admin_access(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return False
    return True

async def cmd_admin(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not await check_admin_access(message):
        return
    
    total_users = await db.get_users_count()
    banned_users = await db.get_banned_users_count()
    tournaments_count = await db.get_tournaments_count()
    
    admin_text = (
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_users}\n"
        f"‚Ä¢ –¢—É—Ä–Ω–∏—Ä–æ–≤: {tournaments_count}\n\n"
        "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    users_btn = InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_users_list')
    search_btn = InlineKeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='admin_search_user')
    ban_btn = InlineKeyboardButton('üö´ –ó–∞–±–∞–Ω–∏—Ç—å', callback_data='admin_ban_user')
    unban_btn = InlineKeyboardButton('‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å', callback_data='admin_unban_user')
    tournaments_btn = InlineKeyboardButton('‚öΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏', callback_data='admin_tournaments')
    matches_btn = InlineKeyboardButton('‚ûï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏', callback_data='admin_matches')  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    stats_btn = InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    
    keyboard.add(users_btn, search_btn)
    keyboard.add(ban_btn, unban_btn)
    keyboard.add(tournaments_btn, matches_btn)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Ç—á–µ–π
    keyboard.add(stats_btn)
    keyboard.add(back_btn)
    
    await message.answer(admin_text, parse_mode="Markdown", reply_markup=keyboard)

async def get_users_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            cursor = await conn.execute("SELECT COUNT(*) FROM users")
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

async def get_banned_users_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            cursor = await conn.execute("SELECT COUNT(*) FROM users WHERE is_banned = 1")
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0

async def admin_users_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin_access(callback.message):
        return
    
    users = await get_all_users()
    
    if not users:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = "üìã *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–µ—Ä–≤—ã–µ 10):*\n\n"
    
    for i, user in enumerate(users[:10], 1):
        status = "üö´" if user.get('is_banned') else "‚úÖ"
        users_text += (
            f"{i}. {status} ID: {user['user_id']}\n"
            f"   üë§: {user['full_name']}\n"
            f"   üîë: {user['username']}\n"
            f"   üìß: {user['email']}\n"
            f"   üìÖ: {user['registration_date'][:10]}\n\n"
        )
    
    if len(users) > 10:
        users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    keyboard = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    keyboard.add(back_btn)
    
    await callback.message.edit_text(users_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

async def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            conn.row_factory = aiosqlite.Row
            cursor = await conn.execute('''
                SELECT user_id, username, email, phone, full_name, 
                       registration_date, last_login, is_banned 
                FROM users 
                ORDER BY registration_date DESC
            ''')
            users = await cursor.fetchall()
            return [dict(user) for user in users]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

async def admin_search_user(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(callback.message):
        return
    
    await callback.message.edit_text(
        "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–æ–≥–∏–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `123456789` (ID)\n"
        "‚Ä¢ `ivanov` (–ª–æ–≥–∏–Ω)\n"
        "‚Ä¢ `ivan@mail.ru` (email)\n"
        "‚Ä¢ `+79123456789` (—Ç–µ–ª–µ—Ñ–æ–Ω)",
        parse_mode="Markdown"
    )
    
    await AdminStates.waiting_for_user_search.set()
    await callback.answer()

async def process_user_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(message):
        await state.finish()
        return
    
    search_query = message.text.strip()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await find_user_by_any_identifier(search_query)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    status = "üö´ –ó–ê–ë–ê–ù–ï–ù" if user.get('is_banned') else "‚úÖ –ê–ö–¢–ò–í–ï–ù"
    user_info = (
        f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n\n"
        f"üÜî *ID:* {user['user_id']}\n"
        f"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n"
        f"üîë *–õ–æ–≥–∏–Ω:* {user['username']}\n"
        f"üìß *Email:* {user['email']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë®‚Äçüíº *–§–ò–û:* {user['full_name']}\n"
        f"üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* {user['registration_date'][:16]}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* {user.get('last_login', '–ù–∏–∫–æ–≥–¥–∞')[:16]}\n"
        f"ü§ñ *TG Username:* @{user.get('tg_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë§ *TG –ò–º—è:* {user.get('tg_first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if user.get('is_banned'):
        unban_btn = InlineKeyboardButton('‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å', callback_data=f'unban_{user["user_id"]}')
        keyboard.add(unban_btn)
    else:
        ban_btn = InlineKeyboardButton('üö´ –ó–∞–±–∞–Ω–∏—Ç—å', callback_data=f'ban_{user["user_id"]}')
        keyboard.add(ban_btn)
    
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    keyboard.add(back_btn)
    
    await message.answer(user_info, parse_mode="Markdown", reply_markup=keyboard)
    await state.finish()

async def find_user_by_any_identifier(identifier: str):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª—é–±–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            conn.row_factory = aiosqlite.Row
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ user_id (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
            if identifier.isdigit():
                cursor = await conn.execute(
                    "SELECT * FROM users WHERE user_id = ?", 
                    (int(identifier),)
                )
                user = await cursor.fetchone()
                if user:
                    return dict(user)
            
            # –ò—â–µ–º –ø–æ username, email –∏–ª–∏ phone
            cursor = await conn.execute('''
                SELECT * FROM users 
                WHERE username = ? OR email = ? OR phone = ?
            ''', (identifier, identifier, identifier))
            
            user = await cursor.fetchone()
            return dict(user) if user else None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def admin_ban_user(callback: types.CallbackQuery):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(callback.message):
        return
    
    await callback.message.edit_text(
        "üö´ *–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID, –ª–æ–≥–∏–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ—Å–ª–µ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!",
        parse_mode="Markdown"
    )
    
    await AdminStates.waiting_for_ban_user.set()
    await callback.answer()

async def process_ban_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(message):
        await state.finish()
        return
    
    identifier = message.text.strip()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await find_user_by_any_identifier(identifier)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —É–∂–µ
    if user.get('is_banned'):
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await ban_user(user['user_id'])
    
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user['username']}* —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ –§–ò–û: {user['full_name']}",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await state.finish()

async def ban_user(user_id: int) -> bool:
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            await conn.execute(
                "UPDATE users SET is_banned = 1 WHERE user_id = ?",
                (user_id,)
            )
            await conn.commit()
            
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def admin_unban_user(callback: types.CallbackQuery):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(callback.message):
        return
    
    await callback.message.edit_text(
        "‚úÖ *–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID, –ª–æ–≥–∏–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "‚ÑπÔ∏è –ú–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="Markdown"
    )
    
    await AdminStates.waiting_for_unban_user.set()
    await callback.answer()

async def process_unban_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin_access(message):
        await state.finish()
        return
    
    identifier = message.text.strip()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await find_user_by_any_identifier(identifier)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏
    if not user.get('is_banned'):
        await message.answer(
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await unban_user(user['user_id'])
    
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user['username']}* —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üë§ –§–ò–û: {user['full_name']}",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await state.finish()

async def unban_user(user_id: int) -> bool:
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            await conn.execute(
                "UPDATE users SET is_banned = 0 WHERE user_id = ?",
                (user_id,)
            )
            await conn.commit()
            
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not await check_admin_access(callback.message):
        return
    
    total_users = await db.get_users_count()
    banned_users = await db.get_banned_users_count()
    active_users = total_users - banned_users
    tournaments_count = await db.get_tournaments_count()
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
        f"‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã—Ö:* {active_users}\n"
        f"üö´ *–ó–∞–±–∞–Ω–µ–Ω–æ:* {banned_users}\n"
        f"‚öΩ *–¢—É—Ä–Ω–∏—Ä–æ–≤:* {tournaments_count}\n\n"
        
        f"üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await get_today_registrations()}\n"
        f"‚Ä¢ –í—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await get_today_logins()}\n\n"
        
        "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* —Å–µ–π—á–∞—Å"
    )
    
    keyboard = InlineKeyboardMarkup()
    refresh_btn = InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='admin_stats')
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    keyboard.add(refresh_btn, back_btn)
    
    await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

async def get_today_registrations() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM users WHERE DATE(registration_date) = DATE('now')"
            )
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return 0

async def get_today_logins() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        async with aiosqlite.connect(db.db_name) as conn:
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM users WHERE DATE(last_login) = DATE('now')"
            )
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return 0

async def admin_ban_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    if not await check_admin_access(callback.message):
        return
    
    user_id = int(callback.data.split('_')[1])
    
    success = await ban_user(user_id)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ!")

async def admin_unban_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    if not await check_admin_access(callback.message):
        return
    
    user_id = int(callback.data.split('_')[1])
    
    success = await unban_user(user_id)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ!")

async def admin_tournaments(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä:",
            parse_mode="Markdown"
        )
    else:
        tournaments_text = "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
        tournaments_text += "üìã *–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:*\n\n"
        
        for i, tournament in enumerate(tournaments, 1):
            tournaments_text += (
                f"{i}. *{tournament['name']}*\n"
                f"   üìù {tournament.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                f"   üë§ –°–æ–∑–¥–∞–ª: {tournament.get('created_by_username', '–ê–¥–º–∏–Ω')}\n"
                f"   üìÖ {tournament['created_date'][:10]}\n\n"
            )
        
        await callback.message.edit_text(
            tournaments_text,
            parse_mode="Markdown"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    add_btn = InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä', callback_data='tournament_add')
    manage_btn = InlineKeyboardButton('üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏', callback_data='tournaments_manage')
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    
    keyboard.add(add_btn, manage_btn)
    keyboard.add(back_btn)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    await callback.answer()

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏
async def admin_matches(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "‚öΩ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏*\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π.",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚öΩ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    add_match_btn = InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á', callback_data='admin_add_match')
    view_matches_btn = InlineKeyboardButton('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç—á–µ–π', callback_data='admin_view_matches')
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_back')
    
    keyboard.add(add_match_btn, view_matches_btn)
    keyboard.add(back_btn)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    await callback.answer()

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def admin_add_match(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    from handlers.matches import start_add_match
    await start_add_match(callback, state)

async def admin_view_matches(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    from handlers.tournaments import show_tournaments
    await show_tournaments(callback.message)
    await callback.answer()

async def admin_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not await check_admin_access(callback.message):
        return
    
    await cmd_admin(callback.message)
    await callback.answer()

def register_handlers_admin(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    dp.register_message_handler(cmd_admin, Command("admin"), state="*")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(admin_users_list, lambda c: c.data == 'admin_users_list')
    dp.register_callback_query_handler(admin_search_user, lambda c: c.data == 'admin_search_user')
    dp.register_callback_query_handler(admin_ban_user, lambda c: c.data == 'admin_ban_user')
    dp.register_callback_query_handler(admin_unban_user, lambda c: c.data == 'admin_unban_user')
    dp.register_callback_query_handler(admin_tournaments, lambda c: c.data == 'admin_tournaments')
    dp.register_callback_query_handler(admin_matches, lambda c: c.data == 'admin_matches')  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.register_callback_query_handler(admin_add_match, lambda c: c.data == 'admin_add_match')  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.register_callback_query_handler(admin_view_matches, lambda c: c.data == 'admin_view_matches')  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.register_callback_query_handler(admin_stats, lambda c: c.data == 'admin_stats')
    dp.register_callback_query_handler(admin_back, lambda c: c.data == 'admin_back')
    dp.register_callback_query_handler(admin_ban_callback, lambda c: c.data.startswith('ban_'))
    dp.register_callback_query_handler(admin_unban_callback, lambda c: c.data.startswith('unban_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_user_search, state=AdminStates.waiting_for_user_search)
    dp.register_message_handler(process_ban_user, state=AdminStates.waiting_for_ban_user)
    dp.register_message_handler(process_unban_user, state=AdminStates.waiting_for_unban_user)