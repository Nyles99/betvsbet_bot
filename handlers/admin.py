from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from database.db_handler import DatabaseHandler
from keyboards.menu import (
    get_admin_main_keyboard, 
    get_admin_tournaments_keyboard,
    get_admin_tournament_detail_keyboard,
    get_admin_tournament_matches_keyboard,
    get_admin_match_detail_keyboard,
    get_admin_users_keyboard,
    get_cancel_keyboard,
    get_cancel_to_tournament_keyboard,
    get_cancel_to_matches_keyboard
)
from states.user_states import AdminStates
from utils.validators import validate_score  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from config import config

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS

async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_main_keyboard()
    )

async def admin_main_callback(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_main_keyboard()
    )

async def admin_tournaments_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    db = DatabaseHandler('users.db')
    tournaments = db.get_all_tournaments_admin()
    
    if tournaments:
        text = "üèÜ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n"
        for tournament in tournaments:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[3] == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            text += f"‚Ä¢ {tournament[1]} ({status})\n"
    else:
        text = "üèÜ –¢—É—Ä–Ω–∏—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä!"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_tournaments_keyboard(tournaments)
    )

async def admin_users_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    db = DatabaseHandler('users.db')
    users = db.get_all_users()
    users_count = db.get_users_count()
    
    text = f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {users_count}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i, user in enumerate(users[:10], 1):
        text += f"{i}. ID: {user.user_id}\n"
        text += f"   üì±: {user.phone_number}\n"
        if user.username:
            text += f"   üë§: {user.username}\n"
        if user.full_name:
            text += f"   üìõ: {user.full_name}\n"
        text += f"   üìÖ: {user.registration_date}\n\n"
    
    if users_count > 10:
        text += f"... –∏ –µ—â–µ {users_count - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_users_keyboard()
    )

async def admin_stats_callback(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    db = DatabaseHandler('users.db')
    users_count = db.get_users_count()
    tournaments = db.get_all_tournaments_admin()
    active_tournaments = db.get_all_tournaments()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
    total_matches = 0
    for tournament in tournaments:
        matches = db.get_tournament_matches(tournament[0])
        total_matches += len(matches)
    
    text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}
üèÜ –í—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(tournaments)}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(active_tournaments)}
‚öΩ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}
    """
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_main_keyboard()
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
async def tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[1])
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    matches = db.get_tournament_matches(tournament_id)
    
    if tournament:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[3] == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
        text = f"""
üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament[1]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament[2] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üî∞ –°—Ç–∞—Ç—É—Å: {status}
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {tournament[4]}
üÜî ID: {tournament[0]}
‚öΩ –ú–∞—Ç—á–µ–π: {len(matches)}
        """
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournament_detail_keyboard(tournament_id, tournament[3])
        )
    else:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def tournament_matches_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    matches = db.get_tournament_matches(tournament_id)
    
    if tournament:
        if matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
            for match in matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                is_expired = db.is_match_expired(match[2], match[3])
                status = "‚è∞ –ò—Å—Ç–µ–∫" if is_expired else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]} ({status})\n\n"
        else:
            text = f"üèÜ –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournament_matches_keyboard(tournament_id, matches)
        )
    else:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def add_tournament_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üèÜ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await AdminStates.waiting_for_tournament_name.set()

async def process_tournament_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    async with state.proxy() as data:
        data['name'] = message.text
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await AdminStates.waiting_for_tournament_description.set()

async def process_tournament_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    async with state.proxy() as data:
        data['description'] = message.text
    
    db = DatabaseHandler('users.db')
    if db.add_tournament(data['name'], data['description'], message.from_user.id):
        await message.answer(
            "‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = db.get_all_tournaments_admin()
        text = "üèÜ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n"
        for tournament in tournaments:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[3] == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            text += f"‚Ä¢ {tournament[1]} ({status})\n"
        
        await message.answer(
            text,
            reply_markup=get_admin_tournaments_keyboard(tournaments)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.",
            reply_markup=get_admin_main_keyboard()
        )
    
    await state.finish()

async def activate_tournament_callback(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    if db.update_tournament_status(tournament_id, 'active'):
        await callback.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        tournament = db.get_tournament(tournament_id)
        matches = db.get_tournament_matches(tournament_id)
        
        text = f"""
üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament[1]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament[2] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üî∞ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {tournament[4]}
üÜî ID: {tournament[0]}
‚öΩ –ú–∞—Ç—á–µ–π: {len(matches)}
        """
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournament_detail_keyboard(tournament_id, 'active')
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.", show_alert=True)

async def deactivate_tournament_callback(callback: CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    if db.update_tournament_status(tournament_id, 'inactive'):
        await callback.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        tournament = db.get_tournament(tournament_id)
        matches = db.get_tournament_matches(tournament_id)
        
        text = f"""
üèÜ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament[1]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament[2] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üî∞ –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {tournament[4]}
üÜî ID: {tournament[0]}
‚öΩ –ú–∞—Ç—á–µ–π: {len(matches)}
        """
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournament_detail_keyboard(tournament_id, 'inactive')
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.", show_alert=True)

async def delete_tournament_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    if db.delete_tournament(tournament_id):
        await callback.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω!", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = db.get_all_tournaments_admin()
        text = "üèÜ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n"
        for tournament in tournaments:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π" if tournament[3] == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            text += f"‚Ä¢ {tournament[1]} ({status})\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournaments_keyboard(tournaments)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.", show_alert=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏
async def add_match_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    async with state.proxy() as data:
        data['tournament_id'] = tournament_id
    
    await callback.message.edit_text(
        "‚öΩ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 04.11.2025):",
        reply_markup=get_cancel_to_tournament_keyboard(tournament_id)
    )
    await AdminStates.waiting_for_match_date.set()

async def process_match_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –º–∞—Ç—á–∞"""
    date_parts = message.text.split('.')
    if len(date_parts) != 3 or not all(part.isdigit() for part in date_parts):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 04.11.2025):")
        return
    
    async with state.proxy() as data:
        data['match_date'] = message.text
    
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:45):",
        reply_markup=get_cancel_to_tournament_keyboard(data['tournament_id'])
    )
    await AdminStates.waiting_for_match_time.set()

async def process_match_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞"""
    time_parts = message.text.split(':')
    if len(time_parts) != 2 or not all(part.isdigit() for part in time_parts):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:45):")
        return
    
    async with state.proxy() as data:
        data['match_time'] = message.text
    
    await message.answer(
        "üèÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=get_cancel_to_tournament_keyboard(data['tournament_id'])
    )
    await AdminStates.waiting_for_team1.set()

async def process_team1(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    async with state.proxy() as data:
        data['team1'] = message.text
    
    await message.answer(
        "üèÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=get_cancel_to_tournament_keyboard(data['tournament_id'])
    )
    await AdminStates.waiting_for_team2.set()

async def process_team2(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞"""
    async with state.proxy() as data:
        data['team2'] = message.text
    
    db = DatabaseHandler('users.db')
    if db.add_match(
        data['tournament_id'], 
        data['match_date'], 
        data['match_time'], 
        data['team1'], 
        data['team2'], 
        message.from_user.id
    ):
        await message.answer(
            "‚úÖ –ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
        tournament = db.get_tournament(data['tournament_id'])
        matches = db.get_tournament_matches(data['tournament_id'])
        
        if matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
            for match in matches:
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
        else:
            text = f"üèÜ –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!"
        
        await message.answer(
            text,
            reply_markup=get_admin_tournament_matches_keyboard(data['tournament_id'], matches)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞.",
            reply_markup=get_admin_tournament_detail_keyboard(data['tournament_id'], 'active')
        )
    
    await state.finish()

async def admin_match_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    match_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if match:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –Ω–∞ –º–∞—Ç—á
        bets_count = db.get_match_bets_count(match_id)
        
        text = f"""
‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 1: {match[4]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 2: {match[5]}
üî∞ –°—Ç–∞—Ç—É—Å: {match[6]}
üìä –°—Ç–∞–≤–æ–∫ —Å–¥–µ–ª–∞–Ω–æ: {bets_count}
üìÖ –°–æ–∑–¥–∞–Ω: {match[7] if match[7] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üÜî ID: {match[0]}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–æ–π
        match_result = match[8] if len(match) > 8 else None
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "-" –∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –¥–µ—Ñ–∏—Å–∞, —Ç–æ —ç—Ç–æ —Å—á–µ—Ç
        if (match_result and 
            match_result != 'None' and 
            '-' in str(match_result) and
            all(c.isdigit() or c == '-' for c in str(match_result).strip())):
            text += f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {match_result}"
        else:
            text += f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`"  # –ó–µ–ª–µ–Ω—ã–π —à—Ä–∏—Ñ—Ç
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_match_detail_keyboard(match_id, match[1])
        )
    else:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def enter_result_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    match_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    async with state.proxy() as data:
        data['match_id'] = match_id
        data['tournament_id'] = match[1]
    
    await callback.message.edit_text(
        f"‚öΩ –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:\n\n"
        f"üìÖ {match[2]} {match[3]}\n"
        f"üèÜ {match[4]} vs {match[5]}\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1):",
        reply_markup=get_cancel_to_matches_keyboard(match[1])
    )
    await AdminStates.waiting_for_match_result.set()

async def process_match_result(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞"""
    result = message.text.strip()
    
    if not validate_score(result):
        async with state.proxy() as data:
            tournament_id = data['tournament_id']
        
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_to_matches_keyboard(tournament_id)
        )
        return
    
    async with state.proxy() as data:
        match_id = data['match_id']
        tournament_id = data['tournament_id']
    
    db = DatabaseHandler('users.db')
    
    if db.update_match_result(match_id, result):
        await message.answer(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {result} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ
        match = db.get_match(match_id)
        match_with_bets = db.get_match_with_bets(match_id)
        bets_count = match_with_bets[8] if match_with_bets else 0
        
        text = f"""
‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 1: {match[4]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 2: {match[5]}
üî∞ –°—Ç–∞—Ç—É—Å: {match[6]}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {match[8]}
üìä –°—Ç–∞–≤–æ–∫ —Å–¥–µ–ª–∞–Ω–æ: {bets_count}
üìÖ –°–æ–∑–¥–∞–Ω: {match[7] if match[7] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üÜî ID: {match[0]}
        """
        
        await message.answer(
            text,
            reply_markup=get_admin_match_detail_keyboard(match_id, tournament_id)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
            reply_markup=get_admin_match_detail_keyboard(match_id, tournament_id)
        )
    
    await state.finish()

async def delete_match_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    match_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if match and db.delete_match(match_id):
        await callback.answer("‚úÖ –ú–∞—Ç—á —É–¥–∞–ª–µ–Ω!", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_id = match[1]
        tournament = db.get_tournament(tournament_id)
        matches = db.get_tournament_matches(tournament_id)
        
        if matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
            for match_item in matches:
                text += f"üìÖ {match_item[2]} {match_item[3]} - {match_item[4]} vs {match_item[5]}\n\n"
        else:
            text = f"üèÜ –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_tournament_matches_keyboard(tournament_id, matches)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞.", show_alert=True)

async def admin_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await state.finish()
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_main_keyboard()
    )

def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    dp.register_message_handler(admin_command, commands=['admin'])
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    dp.register_callback_query_handler(admin_main_callback, lambda c: c.data == "admin_main", state="*")
    dp.register_callback_query_handler(admin_back_to_main, lambda c: c.data == "admin_main", state="*")
    
    # –†–∞–∑–¥–µ–ª—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    dp.register_callback_query_handler(admin_tournaments_callback, lambda c: c.data == "admin_tournaments", state="*")
    dp.register_callback_query_handler(admin_users_callback, lambda c: c.data == "admin_users", state="*")
    dp.register_callback_query_handler(admin_stats_callback, lambda c: c.data == "admin_stats", state="*")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    dp.register_callback_query_handler(add_tournament_callback, lambda c: c.data == "add_tournament", state="*")
    dp.register_callback_query_handler(tournament_detail_callback, lambda c: c.data.startswith("tournament_") and not c.data.startswith("tournament_matches_"), state="*")
    dp.register_callback_query_handler(tournament_matches_callback, lambda c: c.data.startswith("tournament_matches_"), state="*")
    dp.register_callback_query_handler(activate_tournament_callback, lambda c: c.data.startswith("activate_tournament_"))
    dp.register_callback_query_handler(deactivate_tournament_callback, lambda c: c.data.startswith("deactivate_tournament_"))
    dp.register_callback_query_handler(delete_tournament_callback, lambda c: c.data.startswith("delete_tournament_"))
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏
    dp.register_callback_query_handler(add_match_callback, lambda c: c.data.startswith("add_match_"), state="*")
    dp.register_callback_query_handler(admin_match_detail_callback, lambda c: c.data.startswith("admin_match_"), state="*")
    dp.register_callback_query_handler(enter_result_callback, lambda c: c.data.startswith("enter_result_"), state="*")
    dp.register_callback_query_handler(delete_match_callback, lambda c: c.data.startswith("delete_match_"))
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    dp.register_message_handler(process_tournament_name, state=AdminStates.waiting_for_tournament_name)
    dp.register_message_handler(process_tournament_description, state=AdminStates.waiting_for_tournament_description)
    
    # FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞
    dp.register_message_handler(process_match_date, state=AdminStates.waiting_for_match_date)
    dp.register_message_handler(process_match_time, state=AdminStates.waiting_for_match_time)
    dp.register_message_handler(process_team1, state=AdminStates.waiting_for_team1)
    dp.register_message_handler(process_team2, state=AdminStates.waiting_for_team2)
    
    # FSM –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
    dp.register_message_handler(process_match_result, state=AdminStates.waiting_for_match_result)