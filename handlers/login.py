from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from database.db_handler import DatabaseHandler
from keyboards.menu import (
    get_main_inline_keyboard, 
    get_phone_keyboard, 
    get_cancel_login_keyboard,
    remove_keyboard
)
from states.user_states import AuthStates
import hashlib
import logging

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

async def login_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    await state.finish()
    
    await callback.message.edit_text(
        "üö™ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        reply_markup=get_cancel_login_keyboard()
    )
    await AuthStates.waiting_for_username.set()

async def process_login_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ"""
    username = message.text.strip()
    
    db = DatabaseHandler('users.db')
    user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_login_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['username'] = username
        data['user_id'] = user.user_id
    
    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_cancel_login_keyboard()
    )
    await AuthStates.waiting_for_password.set()

async def process_login_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ"""
    password = message.text.strip()
    
    async with state.proxy() as data:
        username = data['username']
        user_id = data['user_id']
    
    db = DatabaseHandler('users.db')
    hashed_password = hash_password(password)
    
    if db.verify_password(user_id, hashed_password):
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        db.update_last_login(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(user_id)
        
        await message.answer(
            f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name or user.username}!\n"
            f"üì± –í–∞—à –Ω–æ–º–µ—Ä: {user.phone_number}",
            reply_markup=remove_keyboard()
        )
        
        await message.answer(
            "üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inline_keyboard()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        logging.info(f"User {user_id} ({username}) successfully logged in")
        
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            reply_markup=get_cancel_login_keyboard()
        )
        return
    
    await state.finish()

async def cancel_login(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    await state.finish()
    await callback.message.edit_text(
        "‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        )
    )

async def login_retry(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
    await state.finish()
    await callback.message.edit_text(
        "üö™ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        reply_markup=get_cancel_login_keyboard()
    )
    await AuthStates.waiting_for_username.set()

async def handle_login_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)"""
    if message.contact:
        phone_number = message.contact.phone_number
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if phone_number.startswith('+'):
            phone_number = phone_number[1:]
        
        db = DatabaseHandler('users.db')
        user = None
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        with db.conn:
            cursor = db.conn.cursor()
            cursor.execute('SELECT * FROM users WHERE phone_number = ?', (phone_number,))
            row = cursor.fetchone()
            if row:
                user = type('User', (), {
                    'user_id': row[0],
                    'phone_number': row[1],
                    'username': row[2],
                    'full_name': row[3]
                })()
        
        if user:
            await message.answer(
                f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.username}\n\n"
                f"üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:",
                reply_markup=get_cancel_login_keyboard()
            )
            async with state.proxy() as data:
                data['username'] = user.username
                data['user_id'] = user.user_id
            await AuthStates.waiting_for_password.set()
        else:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
                    types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="login")
                )
            )
    else:
        await message.answer(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_keyboard()
        )

def register_login_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—Ö–æ–¥–∞"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    dp.register_callback_query_handler(login_start, lambda c: c.data == "login", state="*")
    dp.register_callback_query_handler(login_retry, lambda c: c.data == "login_retry", state="*")
    dp.register_callback_query_handler(cancel_login, lambda c: c.data == "start", state=AuthStates.all_states)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è FSM
    dp.register_message_handler(process_login_username, state=AuthStates.waiting_for_username)
    dp.register_message_handler(process_login_password, state=AuthStates.waiting_for_password)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—Ö–æ–¥–∞)
    dp.register_message_handler(handle_login_phone, content_types=['contact', 'text'], state=AuthStates.waiting_for_phone)