from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from database.db_handler import DatabaseHandler
from keyboards.menu import get_cancel_login_keyboard, get_main_inline_keyboard, get_start_keyboard
from states.user_states import LoginStates
from utils.validators import validate_username
import hashlib

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

async def start_login(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    await callback.message.edit_text(
        "üö™ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        reply_markup=get_cancel_login_keyboard()
    )
    await LoginStates.waiting_for_username.set()

async def process_username_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ"""
    username = message.text.strip()
    
    db = DatabaseHandler('users.db')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user_by_username(username)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_login_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['username'] = username
        data['user_id'] = user.user_id
    
    await message.answer(
        "‚úÖ –õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_cancel_login_keyboard()
    )
    await LoginStates.waiting_for_password.set()

async def process_password_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ"""
    password = message.text.strip()
    hashed_password = hash_password(password)
    
    async with state.proxy() as data:
        username = data['username']
        user_id = data['user_id']
    
    db = DatabaseHandler('users.db')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if db.verify_password(user_id, hashed_password):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
        db.update_last_login(user_id)
        
        await message.answer(
            "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inline_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_login_keyboard()
        )
    
    await state.finish()

async def cancel_login(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—Ö–æ–¥–∞"""
    await state.finish()
    await callback.message.edit_text(
        "‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_start_keyboard()
    )

def register_login_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—Ö–æ–¥–∞"""
    # –ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞
    dp.register_callback_query_handler(start_login, lambda c: c.data == "login", state="*")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    dp.register_message_handler(process_username_login, state=LoginStates.waiting_for_username)
    dp.register_message_handler(process_password_login, state=LoginStates.waiting_for_password)
    
    # –û—Ç–º–µ–Ω–∞ –≤—Ö–æ–¥–∞
    dp.register_callback_query_handler(cancel_login, lambda c: c.data == "start", state=LoginStates.all_states)