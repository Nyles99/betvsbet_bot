from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from database import db
from states import LoginStates
from keyboards import get_back_keyboard, get_main_menu, get_start_keyboard
from utils import is_login_identifier

async def start_login(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if await db.user_exists_by_tg_id(user_id):
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üîê *–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–ª–æ–≥–∏–Ω, email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:\n\n"
        "‚úÖ *–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "‚Ä¢ –õ–æ–≥–∏–Ω (–ø—Ä–∏–º–µ—Ä: `ivanov2024`)\n"
        "‚Ä¢ Email (–ø—Ä–∏–º–µ—Ä: `ivan@mail.ru`)\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: `+79123456789`)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await LoginStates.waiting_for_login.set()

async def process_login_identifier(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/email/—Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    login_identifier = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            "–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_start_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    identifier_type = is_login_identifier(login_identifier)
    
    if identifier_type == "invalid":
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
            "‚Ä¢ –õ–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)\n"
            "‚Ä¢ Email (–ø—Ä–∏–º–µ—Ä: user@mail.ru)\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +79123456789)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_login(login_identifier)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ "
            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/email/—Ç–µ–ª–µ—Ñ–æ–Ω –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        login_identifier=login_identifier,
        user_id=user['user_id']
    )
    
    await message.answer(
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–ø–∞—Ä–æ–ª—å*:\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –ª–æ–≥–∏–Ω–∞:",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await LoginStates.waiting_for_password.set()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    password = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:",
            reply_markup=get_back_keyboard()
        )
        await LoginStates.waiting_for_login.set()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    login_identifier = user_data.get('login_identifier')
    stored_user_id = user_data.get('user_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if await db.verify_password(login_identifier, password):
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = message.from_user
        await db.update_user_field(stored_user_id, 'tg_username', current_user.username or '')
        await db.update_user_field(stored_user_id, 'tg_first_name', current_user.first_name or '')
        await db.update_user_field(stored_user_id, 'tg_last_name', current_user.last_name or '')
        await db.update_last_login(stored_user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await db.get_user_by_id(stored_user_id)
        
        await message.answer(
            "üéâ *–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['full_name']}!\n\n"
            f"üîë –í–æ—à–ª–∏ –∫–∞–∫: `{login_identifier}`\n"
            f"üïí –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {user_info['last_login'][:16]}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:\n\n"
            "–ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

def register_handlers_login(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—Ö–æ–¥–∞"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
    dp.register_message_handler(
        start_login, 
        lambda message: message.text == "üîê –í–æ–π—Ç–∏",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Ö–æ–¥–∞
    dp.register_message_handler(
        process_login_identifier, 
        state=LoginStates.waiting_for_login
    )
    dp.register_message_handler(
        process_password, 
        state=LoginStates.waiting_for_password
    )