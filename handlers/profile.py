from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from database import db
from states import ProfileStates
from keyboards import (
    get_profile_keyboard, 
    get_back_keyboard, 
    get_main_menu, 
    get_cancel_keyboard,
    get_user_tournaments_keyboard,
    get_bets_back_keyboard
)
from utils import validate_username, validate_email, validate_phone, validate_full_name

async def process_profile_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_id = callback.from_user.id
    action = callback.data
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_by_id(user_id)
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if action == 'edit_username':
        await callback.message.answer(
            "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞*\n\n"
            f"–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: `{user_data['username']}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n\n"
            "‚úÖ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n"
            "‚Ä¢ 3-50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )
        await ProfileStates.editing_username.set()
        
    elif action == 'edit_email':
        await callback.message.answer(
            "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ email*\n\n"
            f"–¢–µ–∫—É—â–∏–π email: `{user_data['email']}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:\n\n"
            "–ü—Ä–∏–º–µ—Ä: *example@mail.ru*\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )
        await ProfileStates.editing_email.set()
        
    elif action == 'edit_phone':
        await callback.message.answer(
            "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "üì± *–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
            "–ü—Ä–∏–º–µ—Ä: *+79123456789*\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )
        await ProfileStates.editing_phone.set()
        
    elif action == 'edit_name':
        await callback.message.answer(
            "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {user_data['full_name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:\n\n"
            "–ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á*\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=get_cancel_keyboard()
        )
        await ProfileStates.editing_full_name.set()
        
    elif action == 'user_tournaments':
        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
        await show_user_tournaments_section(callback)
        
    elif action == 'change_password':
        await callback.message.answer(
            "üîë *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è*\n\n"
            "–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @admin",
            reply_markup=get_profile_keyboard()
        )
        
    elif action == 'back_to_main':
        await callback.message.edit_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=None
        )
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

async def show_user_tournaments_section(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã' –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    user_data = await db.get_user_by_id(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    tournaments = await db.get_all_tournaments()
    total_participants = 0
    for tournament in tournaments:
        participants = await db.get_tournament_participants(tournament['id'])
        total_participants += len(participants)
    
    section_text = (
        "üìä *–ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã*\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_data['full_name']}!\n\n"
        f"üéØ –£ –≤–∞—Å —Å–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
        f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö: **{total_participants}**\n\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –£–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á–∏\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        section_text,
        parse_mode="Markdown",
        reply_markup=get_user_tournaments_keyboard(total_participants)
    )

async def show_my_bets(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user_bets = await db.get_user_bets(user_id)
    
    if not user_bets:
        await callback.message.edit_text(
            "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫*\n\n"
            "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '‚öΩ –¢—É—Ä–Ω–∏—Ä—ã'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä\n" 
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞\n"
            "4. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"
            "üéØ –°—Ç–∞–≤–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
        tournaments_bets = {}
        for bet in user_bets:
            tournament_name = bet['tournament_name']
            if tournament_name not in tournaments_bets:
                tournaments_bets[tournament_name] = []
            tournaments_bets[tournament_name].append(bet)
        
        bets_text = "üìä *–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º:*\n\n"
        
        for tournament_name, bets in tournaments_bets.items():
            bets_text += f"üèÜ *{tournament_name}* ({len(bets)} —Å—Ç–∞–≤–æ–∫):\n"
            
            for i, bet in enumerate(bets, 1):
                bets_text += (
                    f"  {i}. {bet['team1']} vs {bet['team2']}\n"
                    f"      üéØ {bet['team1_score']}-{bet['team2_score']}\n"
                    f"      üìÖ {bet['match_date']} {bet['match_time']}\n"
                )
            
            bets_text += "\n"
        
        bets_text += f"üìà –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: **{len(user_bets)}**"
        
        await callback.message.edit_text(
            bets_text,
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
    
    await callback.answer()

async def user_tournaments_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞–≤–æ–∫ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    user_id = callback.from_user.id
    user_data = await db.get_user_by_id(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    tournaments_count = await db.get_tournaments_count()
    
    profile_text = (
        "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîë *–õ–æ–≥–∏–Ω:* `{user_data['username']}`\n"
        f"üìß *Email:* `{user_data['email']}`\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        f"üë®‚Äçüíº *–§–ò–û:* {user_data['full_name']}\n"
        f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['registration_date'][:10]}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {user_data['last_login'][:16]}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await callback.message.edit_text(
        profile_text,
        parse_mode="Markdown",
        reply_markup=get_profile_keyboard()
    )
    await callback.answer()

async def show_profile_from_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–∑ callback"""
    user_id = callback.from_user.id
    user_data = await db.get_user_by_id(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    tournaments_count = await db.get_tournaments_count()
    
    profile_text = (
        "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîë *–õ–æ–≥–∏–Ω:* `{user_data['username']}`\n"
        f"üìß *Email:* `{user_data['email']}`\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        f"üë®‚Äçüíº *–§–ò–û:* {user_data['full_name']}\n"
        f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['registration_date'][:10]}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* {user_data['last_login'][:16]}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:"
    )
    
    await callback.message.edit_text(
        profile_text,
        parse_mode="Markdown",
        reply_markup=get_profile_keyboard()
    )
    await callback.answer()

async def process_edit_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
        return
    
    new_username = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
    is_valid, error_msg = validate_username(new_username)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if not await db.check_field_unique('username', new_username, user_id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!\n"
            "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
    success = await db.update_user_field(user_id, 'username', new_username)
    if success:
        await message.answer(
            f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{new_username}`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_updated_profile(message)
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.finish()

async def process_edit_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ email –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
        return
    
    new_email = message.text.strip().lower()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º email
    is_valid, error_msg = validate_email(new_email)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if not await db.check_field_unique('email', new_email, user_id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º email
    success = await db.update_user_field(user_id, 'email', new_email)
    if success:
        await message.answer(
            f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{new_email}`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.finish()

async def process_edit_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
        return
    
    new_phone = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    is_valid, formatted_phone = validate_phone(new_phone)
    if not is_valid:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if not await db.check_field_unique('phone', formatted_phone, user_id):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    success = await db.update_user_field(user_id, 'phone', formatted_phone)
    if success:
        await message.answer(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{formatted_phone}`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.finish()

async def process_edit_full_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
        return
    
    new_full_name = message.text.strip()
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –§–ò–û
    is_valid, error_msg = validate_full_name(new_full_name)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –µ—â–µ —Ä–∞–∑:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û
    success = await db.update_user_field(user_id, 'full_name', new_full_name)
    if success:
        await message.answer(
            f"‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_full_name}",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_updated_profile(message)
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.finish()

async def show_updated_profile(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
    user_id = message.from_user.id
    user_data = await db.get_user_by_id(user_id)
    
    if user_data:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bets_count = await db.get_user_bets_count(user_id)
        tournaments_count = await db.get_tournaments_count()
        
        profile_text = (
            "üë§ *–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
            f"üîë *–õ–æ–≥–∏–Ω:* `{user_data['username']}`\n"
            f"üìß *Email:* `{user_data['email']}`\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
            f"üë®‚Äçüíº *–§–ò–û:* {user_data['full_name']}\n"
            f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['registration_date'][:10]}\n"
            f"üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {user_data['last_login'][:16]}\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await message.answer(profile_text, parse_mode="Markdown", reply_markup=get_profile_keyboard())
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è!",
            reply_markup=get_main_menu()
        )

async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)"""
    user_id = message.from_user.id
    user_data = await db.get_user_by_id(user_id)
    
    if not user_data:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    tournaments_count = await db.get_tournaments_count()
    
    profile_text = (
        "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîë *–õ–æ–≥–∏–Ω:* `{user_data['username']}`\n"
        f"üìß *Email:* `{user_data['email']}`\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        f"üë®‚Äçüíº *–§–ò–û:* {user_data['full_name']}\n"
        f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['registration_date'][:10]}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* {user_data['last_login'][:16]}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:"
    )
    
    await message.answer(profile_text, parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=get_profile_keyboard())

def register_handlers_profile(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.register_message_handler(
        show_profile, 
        lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    dp.register_callback_query_handler(
        show_profile_from_callback,
        lambda c: c.data == 'back_to_profile',
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    dp.register_callback_query_handler(
        process_profile_callback,
        lambda c: c.data in [
            'edit_username', 'edit_email', 'edit_phone', 'edit_name',
            'user_tournaments', 'change_password', 'back_to_main'
        ]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ "–ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    dp.register_callback_query_handler(
        show_my_bets,
        lambda c: c.data == 'my_bets'
    )
    dp.register_callback_query_handler(
        user_tournaments_back,
        lambda c: c.data == 'user_tournaments_back'
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    dp.register_message_handler(
        process_edit_username,
        state=ProfileStates.editing_username
    )
    dp.register_message_handler(
        process_edit_email,
        state=ProfileStates.editing_email
    )
    dp.register_message_handler(
        process_edit_phone,
        state=ProfileStates.editing_phone
    )
    dp.register_message_handler(
        process_edit_full_name,
        state=ProfileStates.editing_full_name
    )