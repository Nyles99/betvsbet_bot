from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from keyboards import (
    get_score_keyboard, 
    get_bets_back_keyboard, 
    get_main_menu,
    get_user_tournaments_keyboard,
    get_match_details_keyboard,
    get_bet_confirmation_keyboard,
    get_edit_bet_keyboard,
    get_bets_list_keyboard,
    get_bet_actions_keyboard,
    get_bet_stats_keyboard,
    get_back_to_tournament_keyboard,
    get_profile_keyboard,
    get_tournaments_for_bets_keyboard,
    get_bets_back_to_tournaments_keyboard
)
from config_bot import config

async def show_match_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"""
    match_id = int(callback.data.split('_')[1])
    match = await db.get_match_by_id(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
    user_id = callback.from_user.id
    existing_bet = await db.get_match_bet(user_id, match_id)
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    if existing_bet:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞–≤–∫—É
        await callback.message.edit_text(
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            f"‚úÖ *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:* {existing_bet['team1_score']}-{existing_bet['team2_score']}\n\n"
            "–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            parse_mode="Markdown",
            reply_markup=get_match_details_keyboard(match_id, has_bet=True)
        )
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
        await callback.message.edit_text(
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            "üéØ *–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á–µ—Ç –º–∞—Ç—á–∞:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            parse_mode="Markdown",
            reply_markup=get_score_keyboard(match_id)
        )
    
    await callback.answer()

async def process_bet(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏"""
    # callback_data format: bet_123_1-0
    parts = callback.data.split('_')
    match_id = int(parts[1])
    score = parts[2]
    team1_score, team2_score = map(int, score.split('-'))
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    match = await db.get_match_by_id(match_id)
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    await callback.message.edit_text(
        f"üéØ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏*\n\n"
        f"‚öΩ *–ú–∞—Ç—á:* {match['team1']} vs {match['team2']}\n"
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
        f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
        f"‚úÖ *–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:* **{team1_score}-{team2_score}**\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É?",
        parse_mode="Markdown",
        reply_markup=get_bet_confirmation_keyboard(match_id, score)
    )
    
    await callback.answer()

async def confirm_bet(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    # callback_data format: confirm_bet_123_1-0
    parts = callback.data.split('_')
    match_id = int(parts[2])
    score = parts[3]
    team1_score, team2_score = map(int, score.split('-'))
    
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑—É
    success = await db.add_match_bet(user_id, match_id, team1_score, team2_score)
    
    if success:
        match = await db.get_match_by_id(match_id)
        tournament = await db.get_tournament_by_id(match['tournament_id'])
        
        await callback.message.edit_text(
            f"‚úÖ *–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*\n\n"
            f"‚öΩ {match['team1']} vs {match['team2']}\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üéØ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: **{team1_score}-{team2_score}**\n\n"
            "–°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç! üéâ",
            parse_mode="Markdown"
        )
        
        # –í–û–ó–í–†–ê–©–ê–ï–ú–°–Ø –í –ú–ï–ù–Æ –¢–£–†–ù–ò–†–ê –í–ú–ï–°–¢–û –ü–û–ö–ê–ó–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –ú–ê–¢–ß–ê
        from handlers.tournaments import show_tournament_matches
        
        # –°–æ–∑–¥–∞–µ–º mock callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É
        class MockCallback:
            def __init__(self, message, tournament_id):
                self.message = message
                self.data = f'tournament_matches_{tournament_id}'
                self.from_user = message.from_user
        
        mock_callback = MockCallback(callback.message, match['tournament_id'])
        await show_tournament_matches(mock_callback)
        
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def show_match_after_bet(callback: types.CallbackQuery, match_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    match = await db.get_match_by_id(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
    user_id = callback.from_user.id
    existing_bet = await db.get_match_bet(user_id, match_id)
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    if existing_bet:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞–≤–∫—É
        await callback.message.answer(
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            f"‚úÖ *–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:* {existing_bet['team1_score']}-{existing_bet['team2_score']}\n\n"
            "–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            parse_mode="Markdown",
            reply_markup=get_match_details_keyboard(match_id, has_bet=True)
        )
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
        await callback.message.answer(
            f"üéØ *–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:*\n\n"
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á–µ—Ç –º–∞—Ç—á–∞:",
            parse_mode="Markdown",
            reply_markup=get_score_keyboard(match_id)
        )

async def cancel_bet(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å—Ç–∞–≤–∫–∏"""
    match_id = int(callback.data.split('_')[2])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –º–∞—Ç—á–∞
    match = await db.get_match_by_id(match_id)
    if match:
        tournament = await db.get_tournament_by_id(match['tournament_id'])
        
        await callback.message.edit_text(
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            "üéØ *–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á–µ—Ç –º–∞—Ç—á–∞:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            parse_mode="Markdown",
            reply_markup=get_score_keyboard(match_id)
        )
    else:
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def show_user_tournaments(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã' –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    
    await callback.message.edit_text(
        "üìä *–ò–¥—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã*\n\n"
        f"üéØ –£ –≤–∞—Å —Å–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏, "
        "–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.",
        parse_mode="Markdown",
        reply_mup=get_user_tournaments_keyboard()
    )
    await callback.answer()

async def show_my_bets(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–≤–æ–∫"""
    print("DEBUG: show_my_bets –≤—ã–∑–≤–∞–Ω–∞")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
    tournaments_with_bets = await db.get_user_active_tournaments_with_bets(user_id)
    print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏: {len(tournaments_with_bets)}")
    
    if not tournaments_with_bets:
        await callback.message.edit_text(
            "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫*\n\n"
            "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '‚öΩ –¢—É—Ä–Ω–∏—Ä—ã'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä\n" 
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞\n"
            "4. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n\n"
            "üéØ –°—Ç–∞–≤–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
    else:
        total_bets = sum(t['bets_count'] for t in tournaments_with_bets)
        
        selection_text = (
            "üéØ *–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º*\n\n"
            f"üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: **{total_bets}**\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä–æ–≤ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏: **{len(tournaments_with_bets)}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–≤–æ–∫:"
        )
        
        keyboard = get_tournaments_for_bets_keyboard(tournaments_with_bets)
        
        await callback.message.edit_text(
            selection_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    
    await callback.answer()

async def show_bets_by_tournament(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("DEBUG: show_bets_by_tournament –≤—ã–∑–≤–∞–Ω–∞")
    tournament_id = int(callback.data.split('_')[2])
    print(f"DEBUG: tournament_id = {tournament_id}")
    
    user_id = callback.from_user.id
    tournament_bets = await db.get_user_bets_by_tournament(user_id, tournament_id)
    tournament = await db.get_tournament_by_id(tournament_id)
    
    print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–≤–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {len(tournament_bets)}")
    
    if not tournament_bets:
        await callback.message.edit_text(
            f"üì≠ *–°—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament['name']}*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.\n\n"
            "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á.",
            parse_mode="Markdown",
            reply_markup=get_bets_back_to_tournaments_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    bets_text = format_bets_table(tournament_bets, tournament['name'])
    
    await callback.message.edit_text(
        bets_text,
        parse_mode="HTML",
        reply_markup=get_bets_back_to_tournaments_keyboard()
    )
    await callback.answer()

def format_bets_table_simple(bets: list, tournament_name: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    table_text = (
        f"<b>üéØ –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament_name}</b>\n\n"
        "<b>–î–∞—Ç–∞        –ú–∞—Ç—á                          –°—á–µ—Ç</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    )
    
    for bet in bets:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        match_date = bet['match_date']
        if len(match_date) > 5:
            match_date = match_date[:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –î–î.–ú–ú
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç—á
        match_text = f"{bet['team1']} - {bet['team2']}"
        if len(match_text) > 25:
            match_text = match_text[:22] + "..."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç
        score = f"{bet['team1_score']}-{bet['team2_score']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        table_text += f"{match_date:<10} {match_text:<25} {score:>6}\n"
    
    table_text += f"\n<b>üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</b> {len(bets)}"
    
    return table_text

def format_bets_table(bets: list, tournament_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º"""
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
    table_header = (
        f"<b>üéØ –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament_name}</b>\n\n"
        "<b>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</b>\n"
        "<b>‚îÇ   –î–∞—Ç–∞     ‚îÇ            –ú–∞—Ç—á             ‚îÇ  –°—á–µ—Ç  ‚îÇ</b>\n"
        "<b>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</b>\n"
    )
    
    table_rows = ""
    
    for i, bet in enumerate(bets, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–î–î.–ú–ú)
        match_date = bet['match_date']
        if len(match_date) > 5:
            match_date = match_date[:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –î–î.–ú–ú
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç—á (–∫–æ–º–∞–Ω–¥–∞1 vs –∫–æ–º–∞–Ω–¥–∞2)
        match_text = f"{bet['team1']} vs {bet['team2']}"
        if len(match_text) > 24:
            match_text = match_text[:21] + "..."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç
        score = f"{bet['team1_score']}-{bet['team2_score']}"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        table_rows += (
            f"<b>‚îÇ</b> {match_date:<10} <b>‚îÇ</b> {match_text:<26} <b>‚îÇ</b> {score:>6} <b>‚îÇ</b>\n"
        )
    
    # –ü–æ–¥–≤–∞–ª —Ç–∞–±–ª–∏—Ü—ã
    table_footer = (
        "<b>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</b>\n\n"
        f"<b>üìä –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</b> {len(bets)}"
    )
    
    return table_header + table_rows + table_footer

async def view_bet_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
    bet_id = int(callback.data.split('_')[2])
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫—É –ø–æ ID
    user_id = callback.from_user.id
    user_bets = await db.get_user_bets(user_id)
    target_bet = None
    
    for bet in user_bets:
        if bet['id'] == bet_id:
            target_bet = bet
            break
    
    if not target_bet:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    bet_text = (
        f"üìä *–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–∫–∏*\n\n"
        f"‚öΩ **{target_bet['team1']} vs {target_bet['team2']}**\n"
        f"üéØ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: **{target_bet['team1_score']}-{target_bet['team2_score']}**\n"
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: {target_bet['tournament_name']}\n"
        f"üìÖ –î–∞—Ç–∞: {target_bet['match_date']}\n"
        f"üïí –í—Ä–µ–º—è: {target_bet['match_time']}\n"
        f"‚è∞ –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞: {target_bet['bet_date'][:16]}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É:"
    )
    
    await callback.message.edit_text(
        bet_text,
        parse_mode="Markdown",
        reply_markup=get_bet_actions_keyboard(bet_id, target_bet['match_id'])
    )
    await callback.answer()

async def edit_bet(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–≤–∫–∏"""
    bet_id = int(callback.data.split('_')[2])
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
    user_id = callback.from_user.id
    user_bets = await db.get_user_bets(user_id)
    target_bet = None
    
    for bet in user_bets:
        if bet['id'] == bet_id:
            target_bet = bet
            break
    
    if not target_bet:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    match = await db.get_match_by_id(target_bet['match_id'])
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏*\n\n"
        f"‚öΩ *{match['team1']} vs {match['team2']}*\n"
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
        f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
        f"üìã –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: **{target_bet['team1_score']}-{target_bet['team2_score']}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –º–∞—Ç—á–∞:",
        parse_mode="Markdown",
        reply_markup=get_score_keyboard(target_bet['match_id'])
    )
    await callback.answer()

async def delete_bet(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    match_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    match = await db.get_match_by_id(match_id)
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
    success = await db.delete_match_bet(user_id, match_id)
    
    if success:
        await callback.message.edit_text(
            f"üóë *–°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!*\n\n"
            f"‚öΩ {match['team1']} vs {match['team2']}\n\n"
            "–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏!",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
    
    await callback.answer()

async def view_match_bets(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç—á"""
    match_id = int(callback.data.split('_')[2])
    
    match = await db.get_match_by_id(match_id)
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
    all_bets = await db.get_bets_by_match(match_id)
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    if not all_bets:
        await callback.message.edit_text(
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            "üìä –ù–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.",
            parse_mode="Markdown",
            reply_markup=get_bet_stats_keyboard(match_id, is_admin=callback.from_user.id == config.ADMIN_ID)
        )
    else:
        bets_text = (
            f"‚öΩ *{match['team1']} vs {match['team2']}*\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞: {match['match_date']}\n"
            f"üïí –í—Ä–µ–º—è: {match['match_time']}\n\n"
            f"üìä *–°—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á ({len(all_bets)}):*\n\n"
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ —Å—á–µ—Ç—É
        score_counts = {}
        for bet in all_bets:
            score = f"{bet['team1_score']}-{bet['team2_score']}"
            if score in score_counts:
                score_counts[score] += 1
            else:
                score_counts[score] = 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_scores = sorted(score_counts.items(), key=lambda x: x[1], reverse=True)
        
        for score, count in sorted_scores:
            bets_text += f"‚Ä¢ **{score}** - {count} —Å—Ç–∞–≤–æ–∫\n"
        
        bets_text += f"\nüë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{len(all_bets)}**"
        
        await callback.message.edit_text(
            bets_text,
            parse_mode="Markdown",
            reply_markup=get_bet_stats_keyboard(match_id, is_admin=callback.from_user.id == config.ADMIN_ID)
        )
    
    await callback.answer()

async def back_to_tournament(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞"""
    parts = callback.data.split('_')
    if len(parts) >= 3:
        match_id = int(parts[2])
        match = await db.get_match_by_id(match_id)
        
        if match:
            from handlers.tournaments import show_tournament_matches
            await show_tournament_matches(callback, match['tournament_id'])
            return
    
    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É")

async def user_tournaments_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞–≤–æ–∫ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    user_id = callback.from_user.id
    user_data = await db.get_user_by_id(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bets_count = await db.get_user_bets_count(user_id)
    tournaments_count = await db.get_tournaments_count()
    
    profile_text = (
        "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üîë *–õ–æ–≥–∏–Ω:* `{user_data['username']}`\n"
        f"üìß *Email:* `{user_data['email']}`\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}`\n"
        f"üë®‚Äçüíº *–§–ò–û:* {user_data['full_name']}\n"
        f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['registration_date'][:10]}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {user_data['last_login'][:16]}\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: **{bets_count}**\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await callback.message.edit_text(
        profile_text,
        parse_mode="Markdown",
        reply_markup=get_profile_keyboard()
    )
    await callback.answer()

async def profile_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=None
    )
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∞–º–∏
async def admin_view_bets(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ –º–∞—Ç—á —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    match_id = int(callback.data.split('_')[3])
    
    match = await db.get_match_by_id(match_id)
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    all_bets = await db.get_bets_by_match(match_id)
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    
    if not all_bets:
        await callback.message.edit_text(
            f"üëë *–ê–¥–º–∏–Ω: –°—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á*\n\n"
            f"‚öΩ {match['team1']} vs {match['team2']}\n"
            f"üèÜ {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            "–ù–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.",
            parse_mode="Markdown"
        )
    else:
        bets_text = (
            f"üëë *–ê–¥–º–∏–Ω: –í—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á*\n\n"
            f"‚öΩ {match['team1']} vs {match['team2']}\n"
            f"üèÜ {tournament['name'] if tournament else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üìÖ {match['match_date']} {match['match_time']}\n\n"
            f"üìä *–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫ ({len(all_bets)}):*\n\n"
        )
        
        for i, bet in enumerate(all_bets, 1):
            bets_text += (
                f"{i}. **{bet['full_name']}** (@{bet['username']})\n"
                f"   üéØ {bet['team1_score']}-{bet['team2_score']}\n"
                f"   ‚è∞ {bet['bet_date'][:16]}\n\n"
            )
        
        await callback.message.edit_text(
            bets_text,
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def admin_clear_bets(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ –º–∞—Ç—á"""
    match_id = int(callback.data.split('_')[3])
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞–≤–æ–∫
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏–∏
    await callback.message.edit_text(
        "üëë *–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞–≤–æ–∫*\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á.",
        parse_mode="Markdown"
    )
    await callback.answer()

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
async def show_all_players(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    tournaments = await db.get_all_tournaments()
    if not tournaments:
        await callback.message.edit_text(
            "üì≠ *–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤*\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    all_players = []
    seen_players = set()
    
    for tournament in tournaments:
        participants = await db.get_tournament_participants(tournament['id'])
        for player in participants:
            if player['user_id'] not in seen_players:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ –∫ –∏–≥—Ä–æ–∫—É
                player_with_tournament = player.copy()
                player_with_tournament['source_tournament_id'] = tournament['id']
                all_players.append(player_with_tournament)
                seen_players.add(player['user_id'])
    
    if not all_players:
        await callback.message.edit_text(
            "üì≠ *–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤*\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö.",
            parse_mode="Markdown",
            reply_markup=get_bets_back_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    all_players.sort(key=lambda x: x['full_name'])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º tournament_id = 0 –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è "–≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    await show_players_page(callback, all_players, 0, tournament_id=0)
    await callback.answer()

async def show_players_page(callback: types.CallbackQuery, players: list, page: int, tournament_id: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤"""
    ITEMS_PER_PAGE = 10
    total_pages = (len(players) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    current_players = players[start_idx:end_idx]
    
    if tournament_id == 0:
        page_text = (
            f"üë• *–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤*\n\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: **{len(players)}**\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ **{page + 1}** –∏–∑ **{total_pages}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
    else:
        tournament = await db.get_tournament_by_id(tournament_id)
        tournament_name = tournament['name'] if tournament else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä"
        page_text = (
            f"üë• *–ò–≥—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_name}*\n\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: **{len(players)}**\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ **{page + 1}** –∏–∑ **{total_pages}**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
    
    keyboard = get_player_list_keyboard(current_players, tournament_id, page, total_pages)
    
    await callback.message.edit_text(
        page_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_players_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    # callback_data format: players_page_tournamentId_pageNumber
    parts = callback.data.split('_')
    tournament_id = int(parts[2])
    page = int(parts[3])
    
    if tournament_id == 0:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments = await db.get_all_tournaments()
        all_players = []
        seen_players = set()
        
        for tournament in tournaments:
            participants = await db.get_tournament_participants(tournament['id'])
            for player in participants:
                if player['user_id'] not in seen_players:
                    player_with_tournament = player.copy()
                    player_with_tournament['source_tournament_id'] = tournament['id']
                    all_players.append(player_with_tournament)
                    seen_players.add(player['user_id'])
        
        all_players.sort(key=lambda x: x['full_name'])
        await show_players_page(callback, all_players, page, tournament_id)
    else:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        participants = await db.get_tournament_participants(tournament_id)
        if not participants:
            await callback.answer("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!")
            return
        
        await show_players_page(callback, participants, page, tournament_id)
    
    await callback.answer()

async def show_player_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ"""
    # callback_data format: player_info_tournamentId_userId_page
    parts = callback.data.split('_')
    tournament_id = int(parts[2])
    target_user_id = int(parts[3])
    current_page = int(parts[4])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ
    player_data = await db.get_user_by_id(target_user_id)
    if not player_data:
        await callback.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏–≥—Ä–æ–∫–∞
    active_tournaments = await db.get_user_active_tournaments(target_user_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É
    player_info = (
        "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ</b>\n\n"
        f"üîë <b>–õ–æ–≥–∏–Ω:</b> <code>{player_data['username']}</code>\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {player_data['full_name']}\n"
    )
    
    if player_data.get('tg_username'):
        player_info += f"ü§ñ <b>Telegram:</b> @{player_data['tg_username']}\n"
    
    player_info += f"\nüèÜ <b>–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</b> ({len(active_tournaments)}):\n"
    
    if active_tournaments:
        for i, tournament in enumerate(active_tournaments, 1):
            player_info += f"{i}. {tournament['name']}\n"
    else:
        player_info += "–ü–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n"
    
    keyboard = get_player_info_keyboard(tournament_id, target_user_id, current_page)
    
    await callback.message.edit_text(
        player_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

def get_player_list_keyboard(players: list, tournament_id: int, page: int, total_pages: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for player in players:
        btn_text = f"üë§ {player['full_name']} (@{player['username']})"
        if len(btn_text) > 50:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            btn_text = f"üë§ {player['full_name'][:30]}... (@{player['username']})"
        
        btn = InlineKeyboardButton(
            btn_text, 
            callback_data=f'player_info_{tournament_id}_{player["user_id"]}_{page}'
        )
        keyboard.add(btn)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    pagination_keyboard = get_tournament_players_keyboard(tournament_id, page, total_pages)
    if pagination_keyboard.inline_keyboard:
        keyboard.row(*pagination_keyboard.inline_keyboard[0])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if len(pagination_keyboard.inline_keyboard) > 1:
            for row in pagination_keyboard.inline_keyboard[1:]:
                keyboard.add(*row)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    
    return keyboard

def get_tournament_players_keyboard(tournament_id: int, page: int = 0, total_pages: int = 1):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        prev_btn = InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'players_page_{tournament_id}_{page-1}')
        nav_buttons.append(prev_btn)
    
    page_info = InlineKeyboardButton(f'{page+1}/{total_pages}', callback_data='current_page')
    nav_buttons.append(page_info)
    
    if page < total_pages - 1:
        next_btn = InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', callback_data=f'players_page_{tournament_id}_{page+1}')
        nav_buttons.append(next_btn)
    
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º', callback_data='user_tournaments_back')
    keyboard.add(back_btn)
    
    return keyboard

def get_player_info_keyboard(tournament_id: int, user_id: int, current_page: int = 0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ"""
    keyboard = InlineKeyboardMarkup()
    
    back_to_players_btn = InlineKeyboardButton(
        'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 
        callback_data=f'players_page_{tournament_id}_{current_page}'
    )
    tournaments_back_btn = InlineKeyboardButton('üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='user_tournaments_back')
    
    keyboard.add(back_to_players_btn)
    keyboard.add(tournaments_back_btn)
    
    return keyboard

def register_handlers_bets(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞–≤–æ–∫"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–∞ –∏ —Å—Ç–∞–≤–æ–∫
    dp.register_callback_query_handler(show_match_details, lambda c: c.data.startswith('match_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫
    dp.register_callback_query_handler(process_bet, lambda c: c.data.startswith('bet_'))
    dp.register_callback_query_handler(confirm_bet, lambda c: c.data.startswith('confirm_bet_'))
    dp.register_callback_query_handler(cancel_bet, lambda c: c.data.startswith('cancel_bet_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ —Å—Ç–∞–≤–æ–∫
    dp.register_callback_query_handler(show_user_tournaments, lambda c: c.data == 'user_tournaments')
    dp.register_callback_query_handler(show_my_bets, lambda c: c.data == 'my_bets')
    dp.register_callback_query_handler(show_bets_by_tournament, lambda c: c.data.startswith('bets_tournament_'))
    dp.register_callback_query_handler(view_bet_details, lambda c: c.data.startswith('view_bet_'))
    dp.register_callback_query_handler(edit_bet, lambda c: c.data.startswith('edit_bet_'))
    dp.register_callback_query_handler(delete_bet, lambda c: c.data.startswith('delete_bet_'))
    dp.register_callback_query_handler(view_match_bets, lambda c: c.data.startswith('view_bets_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    dp.register_callback_query_handler(user_tournaments_back, lambda c: c.data == 'user_tournaments_back')
    dp.register_callback_query_handler(profile_back, lambda c: c.data == 'profile_back')
    dp.register_callback_query_handler(back_to_tournament, lambda c: c.data.startswith('tournament_back_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    dp.register_callback_query_handler(show_all_players, lambda c: c.data == 'all_players')
    dp.register_callback_query_handler(show_player_info, lambda c: c.data.startswith('player_info_'))
    dp.register_callback_query_handler(handle_players_pagination, lambda c: c.data.startswith('players_page_'))
    
    # –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(admin_view_bets, lambda c: c.data.startswith('admin_view_bets_'))
    dp.register_callback_query_handler(admin_clear_bets, lambda c: c.data.startswith('admin_clear_bets_'))