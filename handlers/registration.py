from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from database.db_handler import DatabaseHandler
from keyboards.menu import get_cancel_registration_keyboard, get_main_inline_keyboard
from states.user_states import AuthStates
from utils.validators import validate_phone_number, format_phone_number, validate_username
import hashlib

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

async def start_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n‚Ä¢ –õ–æ–≥–∏–Ω\n‚Ä¢ –ü–∞—Ä–æ–ª—å\n‚Ä¢ –§–ò–û\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_cancel_registration_keyboard()
    )
    await AuthStates.waiting_for_phone.set()

async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.contact and message.contact.phone_number:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text.strip()
    
    formatted_phone = format_phone_number(phone_number)
    
    if not validate_phone_number(formatted_phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX\n"
            "üì± –ü—Ä–∏–º–µ—Ä: +79123456789\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_registration_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    db = DatabaseHandler('users.db')
    if db.is_phone_taken(formatted_phone):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            "üîê –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_registration_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['phone'] = formatted_phone
    
    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã a-z, A-Z\n"
        "‚Ä¢ –¶–∏—Ñ—Ä—ã 0-9\n"
        "‚Ä¢ –ù–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ _\n"
        "‚Ä¢ –î–ª–∏–Ω–∞: 3-20 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:",
        reply_markup=get_cancel_registration_keyboard()
    )
    await AuthStates.waiting_for_username.set()

async def process_username_registration(message: Message, state: FSMContext):
    username = message.text.strip()
    
    if not validate_username(username):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞.\n"
            "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n"
            "‚Ä¢ –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã: a-z, A-Z\n"
            "‚Ä¢ –¶–∏—Ñ—Ä—ã: 0-9\n"
            "‚Ä¢ –ù–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: _\n"
            "‚Ä¢ –î–ª–∏–Ω–∞: 3-20 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_registration_keyboard()
        )
        return
    
    db = DatabaseHandler('users.db')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ª–æ–≥–∏–Ω
    if db.is_username_taken(username):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç.\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã: ivan_2024, alex_winner, max007\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:",
            reply_markup=get_cancel_registration_keyboard()
        )
        return
    
    async with state.proxy() as data:
        data['username'] = username
    
    await message.answer(
        "‚úÖ –õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å:\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=get_cancel_registration_keyboard()
    )
    await AuthStates.waiting_for_password.set()

async def process_password_registration(message: Message, state: FSMContext):
    password = message.text.strip()
    
    if len(password) < 6:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤:", reply_markup=get_cancel_registration_keyboard())
        return
    
    async with state.proxy() as data:
        data['password'] = password
    
    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=get_cancel_registration_keyboard())
    await AuthStates.waiting_for_full_name.set()

async def process_full_name_registration(message: Message, state: FSMContext):
    full_name = message.text.strip()
    
    if len(full_name) < 2:
        await message.answer("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:", reply_markup=get_cancel_registration_keyboard())
        return
    
    async with state.proxy() as data:
        phone = data['phone']
        username = data['username']
        password = data['password']
    
    db = DatabaseHandler('users.db')
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π (–Ω–∞ —Å–ª—É—á–∞–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
    if db.is_phone_taken(phone):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=get_cancel_registration_keyboard())
        await state.finish()
        return
    
    if db.is_username_taken(username):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=get_cancel_registration_keyboard())
        await state.finish()
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.register_user(message.from_user.id, phone, username, hash_password(password), full_name):
        await message.answer("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_inline_keyboard())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_cancel_registration_keyboard())
    
    await state.finish()

async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
    ))

def register_registration_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_registration, lambda c: c.data == "register", state="*")
    dp.register_message_handler(process_phone, content_types=[types.ContentType.CONTACT, types.ContentType.TEXT], state=AuthStates.waiting_for_phone)
    dp.register_message_handler(process_username_registration, state=AuthStates.waiting_for_username)
    dp.register_message_handler(process_password_registration, state=AuthStates.waiting_for_password)
    dp.register_message_handler(process_full_name_registration, state=AuthStates.waiting_for_full_name)
    dp.register_callback_query_handler(cancel_registration, lambda c: c.data == "start", state=AuthStates.all_states)