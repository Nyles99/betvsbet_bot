from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from database import db
from states import RegistrationStates
from keyboards import get_back_keyboard, get_phone_keyboard, get_main_menu, get_start_keyboard
from utils import validate_username, validate_email, validate_phone, validate_full_name

async def start_registration(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if await db.user_exists_by_tg_id(user_id):
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        "üìù *–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
        "–®–∞–≥ 1 –∏–∑ 5:\n"
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ *–ª–æ–≥–∏–Ω* –¥–ª—è –≤—Ö–æ–¥–∞:\n\n"
        "‚úÖ *–ú–æ–∂–Ω–æ:* –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\n"
        "‚ùå *–ù–µ–ª—å–∑—è:* –ø—Ä–æ–±–µ–ª—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã\n"
        "üìè *–î–ª–∏–Ω–∞:* 3-50 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä: `ivanov2024`",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await RegistrationStates.waiting_for_username.set()

async def process_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ - –®–∞–≥ 1"""
    username = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
    is_valid, error_msg = validate_username(username)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
    if not await db.check_field_unique('username', username):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!\n"
            "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(username=username)
    
    await message.answer(
        "‚úÖ –õ–æ–≥–∏–Ω –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–®–∞–≥ 2 –∏–∑ 5:\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–ø–∞—Ä–æ–ª—å*:\n\n"
        "‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await RegistrationStates.waiting_for_password.set()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è - –®–∞–≥ 2"""
    password = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:",
            reply_markup=get_back_keyboard()
        )
        await RegistrationStates.waiting_for_username.set()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if len(password) < 6:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 6 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(password=password)
    
    await message.answer(
        "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–®–∞–≥ 3 –∏–∑ 5:\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á*",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await RegistrationStates.waiting_for_full_name.set()

async def process_full_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û - –®–∞–≥ 3"""
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await RegistrationStates.waiting_for_password.set()
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –§–ò–û
    is_valid, error_msg = validate_full_name(full_name)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(full_name=full_name)
    
    await message.answer(
        "‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–®–∞–≥ 4 –∏–∑ 5:\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *example@mail.ru*",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    
    await RegistrationStates.waiting_for_email.set()

async def process_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email - –®–∞–≥ 4"""
    email = message.text.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
        await RegistrationStates.waiting_for_full_name.set()
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º email
    is_valid, error_msg = validate_email(email)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–í–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    if not await db.check_field_unique('email', email):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(email=email)
    
    await message.answer(
        "‚úÖ Email –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–®–∞–≥ 5 –∏–∑ 5:\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:\n\n"
        "üì± *–§–æ—Ä–º–∞—Ç:* +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n"
        "–ü—Ä–∏–º–µ—Ä: *+79123456789* –∏–ª–∏ *89123456789*\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        parse_mode="Markdown",
        reply_markup=get_phone_keyboard()
    )
    
    await RegistrationStates.waiting_for_phone.set()

async def process_phone_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º - –®–∞–≥ 5"""
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
        await RegistrationStates.waiting_for_email.set()
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    is_valid, formatted_phone = validate_phone(phone)
    if not is_valid:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX\n\n"
            "–ü—Ä–∏–º–µ—Ä: *+79123456789*",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not await db.check_field_unique('phone', formatted_phone):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=formatted_phone)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration(message, state)

async def process_phone_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ - –®–∞–≥ 5"""
    if message.contact:
        phone = message.contact.phone_number
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        is_valid, formatted_phone = validate_phone(phone)
        if not is_valid:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not await db.check_field_unique('phone', formatted_phone):
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(phone=formatted_phone)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await complete_registration(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

async def complete_registration(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    username = user_data.get('username')
    password = user_data.get('password')
    email = user_data.get('email')
    phone = user_data.get('phone')
    full_name = user_data.get('full_name')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
    user = message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    result = await db.add_user(
        user_id=user.id,
        username=username,
        password=password,
        email=email,
        phone=phone,
        full_name=full_name,
        tg_username=user.username or '',
        tg_first_name=user.first_name or '',
        tg_last_name=user.last_name or ''
    )
    
    if result is True:
        await message.answer(
            "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"üìã *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:*\n"
            f"üîë *–õ–æ–≥–∏–Ω:* `{username}`\n"
            f"üìß *Email:* `{email}`\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`\n"
            f"üë§ *–§–ò–û:* {full_name}\n\n"
            "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è:\n"
            "‚Ä¢ –õ–æ–≥–∏–Ω\n‚Ä¢ Email\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏!",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        error_messages = {
            "username_exists": "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!",
            "email_exists": "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            "phone_exists": "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        }
        
        await message.answer(
            error_messages.get(result, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.") +
            "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ: /start",
            reply_markup=get_start_keyboard()
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

def register_handlers_registration(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    dp.register_message_handler(
        start_registration, 
        lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.register_message_handler(
        process_username, 
        state=RegistrationStates.waiting_for_username
    )
    dp.register_message_handler(
        process_password, 
        state=RegistrationStates.waiting_for_password
    )
    dp.register_message_handler(
        process_full_name, 
        state=RegistrationStates.waiting_for_full_name
    )
    dp.register_message_handler(
        process_email, 
        state=RegistrationStates.waiting_for_email
    )
    dp.register_message_handler(
        process_phone_message, 
        state=RegistrationStates.waiting_for_phone,
        content_types=types.ContentType.TEXT
    )
    dp.register_message_handler(
        process_phone_contact, 
        state=RegistrationStates.waiting_for_phone,
        content_types=types.ContentType.CONTACT
    )