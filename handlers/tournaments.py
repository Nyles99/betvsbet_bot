from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import db
from config_bot import config
from keyboards import (get_tournaments_keyboard, get_tournaments_list_keyboard, 
                      get_tournament_manage_keyboard, get_tournaments_manage_list_keyboard,
                      get_back_keyboard, get_cancel_keyboard, get_main_menu)

class TournamentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏"""
    waiting_for_tournament_name = State()
    waiting_for_tournament_description = State()
    waiting_for_tournament_edit_name = State()
    waiting_for_tournament_edit_description = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID

async def show_tournaments(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await db.user_exists_by_tg_id(user_id):
        await message.answer(
            "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n\n"
            "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await db.is_user_banned(user_id):
        await message.answer(
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
            "–î–æ—Å—Ç—É–ø –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    admin_status = is_admin(user_id)
    await message.answer(
        "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ —Ñ—É—Ç–±–æ–ª—É.\n\n"
        f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {await db.get_tournaments_count()}",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tournaments_keyboard(admin_status)
    )

async def show_tournaments_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await db.user_exists_by_tg_id(user_id):
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        return
    
    tournaments = await db.get_all_tournaments()
    admin_status = is_admin(user_id)
    
    if not tournaments:
        await callback.message.edit_text(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
            reply_markup=get_tournaments_keyboard(admin_status)
        )
    else:
        tournaments_text = "üìã *–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:*\n\n"
        for i, tournament in enumerate(tournaments, 1):
            tournaments_text += (
                f"{i}. *{tournament['name']}*\n"
                f"   üìù {tournament.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                f"   üë§ –°–æ–∑–¥–∞–ª: {tournament.get('created_by_username', '–ê–¥–º–∏–Ω')}\n"
                f"   üìÖ {tournament['created_date'][:10]}\n\n"
            )
        
        await callback.message.edit_text(
            tournaments_text,
            parse_mode="Markdown",
            reply_markup=get_tournaments_list_keyboard(tournaments, admin_status)
        )
    
    await callback.answer()

async def show_tournament_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π"""
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    matches = await db.get_matches_by_tournament(tournament_id)
    is_admin = callback.from_user.id == config.ADMIN_ID
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    tournament_text = (
        f"‚öΩ *{tournament['name']}*\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        f"üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* {tournament.get('created_by_username', '–ê–¥–º–∏–Ω')}\n"
        f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {tournament['created_date'][:10]}\n"
        f"üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π:* {len(matches)}\n\n"
    )
    
    if matches:
        tournament_text += "üìã *–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:*\n\n"
        for i, match in enumerate(matches, 1):
            tournament_text += f"{i}. {match['match_date']} {match['match_time']} {match['team1']} - {match['team2']}\n"
    else:
        tournament_text += "üì≠ –í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Ç—á–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    from keyboards import get_tournament_matches_keyboard
    keyboard = get_tournament_matches_keyboard(matches, tournament_id, is_admin)
    
    await callback.message.edit_text(
        tournament_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def tournament_add(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2024*",
        parse_mode="Markdown"
    )
    
    await TournamentStates.waiting_for_tournament_name.set()
    await callback.answer()

async def process_tournament_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    tournament_name = message.text.strip()
    
    if len(tournament_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(tournament_name=tournament_name)
    
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        reply_markup=get_back_keyboard()
    )
    
    await TournamentStates.waiting_for_tournament_description.set()

async def process_tournament_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=get_cancel_keyboard()
        )
        await TournamentStates.waiting_for_tournament_name.set()
        return
    
    tournament_description = message.text.strip()
    user_data = await state.get_data()
    tournament_name = user_data.get('tournament_name')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑—É
    success = await db.add_tournament(
        name=tournament_name,
        description=tournament_description if tournament_description != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "",
        created_by=message.from_user.id
    )
    
    if success:
        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä *{tournament_name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def tournaments_manage(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ (–∞–¥–º–∏–Ω)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_tournaments_manage_list_keyboard(tournaments)
        )
    else:
        await callback.message.edit_text(
            "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=get_tournaments_manage_list_keyboard(tournaments)
        )
    
    await callback.answer()

async def tournament_manage_detail(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tournament_text = (
        f"üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º:*\n\n"
        f"‚öΩ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {tournament['name']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        f"üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å:* {tournament.get('created_by_username', '–ê–¥–º–∏–Ω')}\n"
        f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {tournament['created_date'][:16]}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        tournament_text,
        parse_mode="Markdown",
        reply_markup=get_tournament_manage_keyboard(tournament_id)
    )
    await callback.answer()

async def tournament_edit(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.update_data(tournament_id=tournament_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{tournament['name']}*\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="Markdown"
    )
    
    await TournamentStates.waiting_for_tournament_edit_name.set()
    await callback.answer()

async def process_tournament_edit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_name = message.text.strip()
    
    if len(new_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(new_name=new_name)
    
    await message.answer(
        "‚úÖ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:"
    )
    
    await TournamentStates.waiting_for_tournament_edit_description.set()

async def process_tournament_edit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_description = message.text.strip()
    user_data = await state.get_data()
    tournament_id = user_data.get('tournament_id')
    new_name = user_data.get('new_name')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = await db.update_tournament(tournament_id, new_name, new_description)
    
    if success:
        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{new_name}*",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def tournament_delete(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = await db.delete_tournament(tournament_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä *{tournament['name']}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def tournaments_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user_id = callback.from_user.id
    admin_status = is_admin(user_id)
    
    await callback.message.edit_text(
        "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_tournaments_keyboard(admin_status)
    )
    await callback.answer()

async def tournaments_manage_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    await callback.message.edit_text(
        "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=get_tournaments_manage_list_keyboard(tournaments)
    )
    await callback.answer()

def register_handlers_tournaments(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—É—Ä–Ω–∏—Ä—ã"
    dp.register_message_handler(
        show_tournaments, 
        lambda message: message.text == "‚öΩ –¢—É—Ä–Ω–∏—Ä—ã",
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(show_tournaments_list, lambda c: c.data == 'tournaments_list')
    dp.register_callback_query_handler(tournament_add, lambda c: c.data == 'tournament_add')
    dp.register_callback_query_handler(tournaments_manage, lambda c: c.data == 'tournaments_manage')
    dp.register_callback_query_handler(tournaments_back, lambda c: c.data == 'tournaments_back')
    dp.register_callback_query_handler(tournaments_manage_back, lambda c: c.data == 'tournaments_manage_back')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π show_tournament_detail)
    dp.register_callback_query_handler(show_tournament_detail, lambda c: c.data.startswith('tournament_matches_'))
    
    dp.register_callback_query_handler(tournament_manage_detail, lambda c: c.data.startswith('tournament_manage_'))
    dp.register_callback_query_handler(tournament_edit, lambda c: c.data.startswith('tournament_edit_'))
    dp.register_callback_query_handler(tournament_delete, lambda c: c.data.startswith('tournament_delete_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_tournament_name, state=TournamentStates.waiting_for_tournament_name)
    dp.register_message_handler(process_tournament_description, state=TournamentStates.waiting_for_tournament_description)
    dp.register_message_handler(process_tournament_edit_name, state=TournamentStates.waiting_for_tournament_edit_name)
    dp.register_message_handler(process_tournament_edit_description, state=TournamentStates.waiting_for_tournament_edit_description)