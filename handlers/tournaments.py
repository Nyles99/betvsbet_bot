from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from config_bot import config
from keyboards import (
    get_tournaments_keyboard, 
    get_tournaments_list_keyboard, 
    get_tournament_manage_keyboard, 
    get_tournaments_manage_list_keyboard,
    get_back_keyboard, 
    get_cancel_keyboard, 
    get_main_menu,
    get_tournament_matches_keyboard,
    get_tournament_participation_keyboard,
    get_tournament_rules_keyboard,
    get_tournament_edit_rules_keyboard
)

class TournamentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏"""
    waiting_for_tournament_name = State()
    waiting_for_tournament_description = State()
    waiting_for_tournament_rules = State()
    waiting_for_tournament_edit_name = State()
    waiting_for_tournament_edit_description = State()
    waiting_for_tournament_edit_rules = State()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID

async def show_tournaments(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await db.user_exists_by_tg_id(user_id):
        await message.answer(
            "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n\n"
            "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await db.is_user_banned(user_id):
        await message.answer(
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
            "–î–æ—Å—Ç—É–ø –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    admin_status = is_admin(user_id)
    tournaments_count = await db.get_tournaments_count()
    
    await message.answer(
        "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ —Ñ—É—Ç–±–æ–ª—É, "
        "—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö –∏ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á–∏.\n\n"
        f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: **{tournaments_count}**",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_tournaments_keyboard(admin_status)
    )

async def show_tournaments_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not await db.user_exists_by_tg_id(user_id):
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        return
    
    tournaments = await db.get_all_tournaments()
    admin_status = is_admin(user_id)
    
    if not tournaments:
        await callback.message.edit_text(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –ù–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ.",
            reply_markup=get_tournaments_keyboard(admin_status)
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        tournaments_text = "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n"
        for i, tournament in enumerate(tournaments, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            matches_count = await db.get_matches_count_by_tournament(tournament['id'])
            
            description = tournament.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            created_by = tournament.get('created_by_username', '–ê–¥–º–∏–Ω')
            
            tournaments_text += (
                f"{i}. {tournament['name']}\n"
                f"   üìù {description}\n"
                f"   üë§ –°–æ–∑–¥–∞–ª: {created_by}\n"
                f"   üî¢ –ú–∞—Ç—á–µ–π: {matches_count}\n"
                f"   üìÖ {tournament['created_date'][:10]}\n\n"
            )
        
        await callback.message.edit_text(
            tournaments_text,
            parse_mode=None,  # –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            reply_markup=get_tournaments_list_keyboard(tournaments, admin_status)
        )
    
    await callback.answer()

async def show_tournament_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"""
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_id = callback.from_user.id
    is_admin_user = is_admin(user_id)
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    if is_admin_user:
        await show_tournament_matches(callback, tournament_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    is_participating = await db.is_user_participating(user_id, tournament_id)
    
    if is_participating:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏
        await show_tournament_matches(callback, tournament_id)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        matches_count = await db.get_matches_count_by_tournament(tournament_id)
        
        tournament_text = (
            f"‚öΩ *{tournament['name']}*\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"üî¢ *–ú–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ:* {matches_count}\n\n"
            "‚ùì *–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ?*\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞\n"
            "‚Ä¢ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ\n"
            "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = get_tournament_participation_keyboard(tournament_id)
        
        await callback.message.edit_text(
            tournament_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    
    await callback.answer()

async def show_tournament_matches(callback: types.CallbackQuery, tournament_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not tournament_id:
        tournament_id = int(callback.data.split('_')[2])
    
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    all_matches = await db.get_matches_by_tournament(tournament_id)
    is_admin_user = is_admin(callback.from_user.id)
    user_id = callback.from_user.id
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –º–∞—Ç—á–∏
    if is_admin_user:
        matches_to_show = all_matches
        matches_with_bets = []
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏
        matches_to_show = []
        matches_with_bets = []
        
        for match in all_matches:
            user_bet = await db.get_match_bet(user_id, match['id'])
            if not user_bet:
                matches_to_show.append(match)
            else:
                matches_with_bets.append(match)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    tournament_text = (
        f"‚öΩ *{tournament['name']}*\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
    )
    
    if is_admin_user:
        tournament_text += f"üî¢ *–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π:* {len(all_matches)}\n\n"
        if all_matches:
            tournament_text += "üìã *–í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞:*\n\n"
            for i, match in enumerate(all_matches, 1):
                # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                bets_count = len(await db.get_bets_by_match(match['id']))
                tournament_text += f"{i}. {match['match_date']} {match['match_time']} {match['team1']} - {match['team2']} (—Å—Ç–∞–≤–æ–∫: {bets_count})\n"
    else:
        tournament_text += (
            f"üî¢ *–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ:* {len(all_matches)}\n"
            f"üéØ *–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å—Ç–∞–≤–æ–∫:* {len(matches_to_show)}\n"
            f"‚úÖ *–°—Ç–∞–≤–æ–∫ —Å–¥–µ–ª–∞–Ω–æ:* {len(matches_with_bets)}\n\n"
        )
        
        if matches_to_show:
            tournament_text += "üìã *–ú–∞—Ç—á–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫:*\n\n"
            for i, match in enumerate(matches_to_show, 1):
                tournament_text += f"{i}. {match['match_date']} {match['match_time']} {match['team1']} - {match['team2']}\n"
        else:
            tournament_text += "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
            tournament_text += "–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞! üèÜ\n"
            tournament_text += "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n"
            tournament_text += f"‚úÖ –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ {len(matches_with_bets)} –º–∞—Ç—á–µ–π"
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    keyboard = get_tournament_matches_keyboard(
        all_matches if is_admin_user else matches_to_show, 
        tournament_id, 
        is_admin_user
    )
    
    await callback.message.edit_text(
        tournament_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def participate_tournament(callback: types.CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    tournament_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await db.add_tournament_participant(user_id, tournament_id, True)
    
    if success:
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!")
        await show_tournament_matches(callback, tournament_id)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É!")

async def decline_tournament(callback: types.CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    tournament_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await db.add_tournament_participant(user_id, tournament_id, False)
    
    if success:
        await callback.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ")
        await show_tournaments_list(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–∞–∑–∞!")

async def show_tournament_rules(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    rules = tournament.get('rules', '–ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.')
    is_admin_user = is_admin(callback.from_user.id)
    
    rules_text = (
        f"‚öΩ *{tournament['name']}*\n\n"
        f"üìã *–ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:*\n\n{rules}"
    )
    
    keyboard = get_tournament_rules_keyboard(tournament_id, is_admin_user)
    
    await callback.message.edit_text(
        rules_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def edit_tournament_rules(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.update_data(tournament_id=tournament_id)
    
    current_rules = tournament.get('rules', '')
    
    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ç—É—Ä–Ω–∏—Ä–∞: {tournament['name']}*\n\n"
        f"–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n{current_rules}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="Markdown"
    )
    
    await TournamentStates.waiting_for_tournament_edit_rules.set()
    await callback.answer()

async def process_tournament_edit_rules(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_rules = message.text.strip()
    
    if len(new_rules) < 10:
        await message.answer(
            "‚ùå –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    user_data = await state.get_data()
    tournament_id = user_data.get('tournament_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    success = await db.update_tournament_rules(tournament_id, new_rules)
    
    if success:
        await message.answer(
            "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —Ç—É—Ä–Ω–∏—Ä–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def tournament_add(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ß–µ–º–ø–∏–æ–Ω–∞—Ç –º–∏—Ä–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2024*",
        parse_mode="Markdown"
    )
    
    await TournamentStates.waiting_for_tournament_name.set()
    await callback.answer()

async def process_tournament_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    tournament_name = message.text.strip()
    
    if len(tournament_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(tournament_name=tournament_name)
    
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        reply_markup=get_back_keyboard()
    )
    
    await TournamentStates.waiting_for_tournament_description.set()

async def process_tournament_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=get_cancel_keyboard()
        )
        await TournamentStates.waiting_for_tournament_name.set()
        return
    
    tournament_description = message.text.strip()
    user_data = await state.get_data()
    tournament_name = user_data.get('tournament_name')
    
    await state.update_data(tournament_description=tournament_description)
    
    await message.answer(
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
        "–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –∏ —Å–∏—Å—Ç–µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤.",
        reply_markup=get_back_keyboard()
    )
    
    await TournamentStates.waiting_for_tournament_rules.set()

async def process_tournament_rules(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª —Ç—É—Ä–Ω–∏—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=get_back_keyboard()
        )
        await TournamentStates.waiting_for_tournament_description.set()
        return
    
    tournament_rules = message.text.strip()
    user_data = await state.get_data()
    tournament_name = user_data.get('tournament_name')
    tournament_description = user_data.get('tournament_description')
    
    if len(tournament_rules) < 10:
        await message.answer(
            "‚ùå –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑—É
    success = await db.add_tournament(
        name=tournament_name,
        description=tournament_description if tournament_description != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "",
        rules=tournament_rules,
        created_by=message.from_user.id
    )
    
    if success:
        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä *{tournament_name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def tournaments_manage(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ (–∞–¥–º–∏–Ω)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_tournaments_manage_list_keyboard(tournaments)
        )
    else:
        await callback.message.edit_text(
            "üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=get_tournaments_manage_list_keyboard(tournaments)
        )
    
    await callback.answer()

async def tournament_manage_detail(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–æ–º"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    matches_count = await db.get_matches_count_by_tournament(tournament_id)
    
    # –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
    tournament_text = (
        f"üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º:\n\n"
        f"‚öΩ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {tournament.get('created_by_username', '–ê–¥–º–∏–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {tournament['created_date'][:16]}\n"
        f"üî¢ –ú–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {matches_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏
    keyboard = get_tournament_manage_keyboard(tournament_id)
    
    await callback.message.edit_text(
        tournament_text,
        parse_mode=None,  # –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        reply_markup=keyboard
    )
    await callback.answer()

async def tournament_edit(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.update_data(tournament_id=tournament_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{tournament['name']}*\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {tournament.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="Markdown"
    )
    
    await TournamentStates.waiting_for_tournament_edit_name.set()
    await callback.answer()

async def process_tournament_edit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_name = message.text.strip()
    
    if len(new_name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(new_name=new_name)
    
    await message.answer(
        "‚úÖ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:"
    )
    
    await TournamentStates.waiting_for_tournament_edit_description.set()

async def process_tournament_edit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_description = message.text.strip()
    user_data = await state.get_data()
    tournament_id = user_data.get('tournament_id')
    new_name = user_data.get('new_name')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    tournament = await db.get_tournament_by_id(tournament_id)
    current_rules = tournament.get('rules', '')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = await db.update_tournament(tournament_id, new_name, new_description, current_rules)
    
    if success:
        await message.answer(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{new_name}*",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def tournament_delete(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = await db.delete_tournament(tournament_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä *{tournament['name']}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞!",
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def handle_all_back_buttons(callback: types.CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ù–∞–∑–∞–¥"""
    user_id = callback.from_user.id
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    try:
        if callback.data == 'tournaments_back':
            admin_status = is_admin(user_id)
            
            await callback.message.delete()
            await callback.message.answer(
                "‚öΩ –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=None,
                reply_markup=get_tournaments_keyboard(admin_status)
            )
            return
        
        elif callback.data == 'tournaments_manage_back':
            if not is_admin(user_id):
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                return
            
            tournaments = await db.get_all_tournaments()
            
            await callback.message.delete()
            await callback.message.answer(
                "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                parse_mode=None,
                reply_markup=get_tournaments_manage_list_keyboard(tournaments)
            )
            return
        
        elif callback.data == 'back_to_main':
            from keyboards import get_main_menu
            await callback.message.delete()
            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu()
            )
            return
        
        elif callback.data == 'admin_back':
            from handlers.admin import show_admin_panel
            await show_admin_panel(callback)
            return
        
    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def register_handlers_tournaments(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—É—Ä–Ω–∏—Ä—ã" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.register_message_handler(
        show_tournaments, 
        lambda message: message.text == "‚öΩ –¢—É—Ä–Ω–∏—Ä—ã",
        state="*"
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(show_tournaments_list, lambda c: c.data == 'tournaments_list')
    dp.register_callback_query_handler(tournament_add, lambda c: c.data == 'tournament_add')
    dp.register_callback_query_handler(tournaments_manage, lambda c: c.data == 'tournaments_manage')
    
    # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
    dp.register_callback_query_handler(
        handle_all_back_buttons, 
        lambda c: c.data in [
            'tournaments_back', 
            'tournaments_manage_back', 
            'back_to_main',
            'admin_back'
        ]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –º–∞—Ç—á–µ–π
    dp.register_callback_query_handler(show_tournament_detail, lambda c: c.data.startswith('tournament_matches_'))
    dp.register_callback_query_handler(show_tournament_rules, lambda c: c.data.startswith('tournament_rules_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    dp.register_callback_query_handler(participate_tournament, lambda c: c.data.startswith('participate_'))
    dp.register_callback_query_handler(decline_tournament, lambda c: c.data.startswith('decline_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ (–∞–¥–º–∏–Ω)
    dp.register_callback_query_handler(tournament_manage_detail, lambda c: c.data.startswith('tournament_manage_'))
    dp.register_callback_query_handler(tournament_edit, lambda c: c.data.startswith('tournament_edit_'))
    dp.register_callback_query_handler(tournament_delete, lambda c: c.data.startswith('tournament_delete_'))
    dp.register_callback_query_handler(edit_tournament_rules, lambda c: c.data.startswith('edit_rules_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
    dp.register_message_handler(process_tournament_name, state=TournamentStates.waiting_for_tournament_name)
    dp.register_message_handler(process_tournament_description, state=TournamentStates.waiting_for_tournament_description)
    dp.register_message_handler(process_tournament_rules, state=TournamentStates.waiting_for_tournament_rules)
    dp.register_message_handler(process_tournament_edit_name, state=TournamentStates.waiting_for_tournament_edit_name)
    dp.register_message_handler(process_tournament_edit_description, state=TournamentStates.waiting_for_tournament_edit_description)
    dp.register_message_handler(process_tournament_edit_rules, state=TournamentStates.waiting_for_tournament_edit_rules)