from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from datetime import datetime
import re

from database import db
from states import MatchStates
from keyboards import (
    get_tournaments_for_matches_keyboard, 
    get_tournament_matches_keyboard,
    get_cancel_match_keyboard,
    get_main_menu
)
from config_bot import config

async def start_add_match(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not callback.from_user.id == config.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤!\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä.",
            reply_markup=None
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "‚öΩ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞:",
        parse_mode="Markdown",
        reply_markup=get_tournaments_for_matches_keyboard(tournaments)
    )
    
    await MatchStates.waiting_for_tournament_select.set()
    await callback.answer()

async def select_tournament_for_match(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not callback.from_user.id == config.ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.update_data(tournament_id=tournament_id, tournament_name=tournament['name'])
    
    await callback.message.edit_text(
        f"‚öΩ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–Ω–∏—Ä: {tournament['name']}*\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *19.11.2024*",
        parse_mode="Markdown"
    )
    
    await MatchStates.waiting_for_match_date.set()
    await callback.answer()

async def process_match_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    match_date = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', match_date):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*\n\n"
            "–ü—Ä–∏–º–µ—Ä: *19.11.2024*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    try:
        day, month, year = map(int, match_date.split('.'))
        datetime(year, month, day)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞!\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(match_date=match_date)
    
    await message.answer(
        "‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –ø–æ *–ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏* –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú*:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *17:00*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_match_time.set()

async def process_match_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    match_time = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r'^\d{2}:\d{2}$', match_time):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú*\n\n"
            "–ü—Ä–∏–º–µ—Ä: *17:00*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    try:
        hours, minutes = map(int, match_time.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!\n"
            "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(match_time=match_time)
    
    await message.answer(
        "‚úÖ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "üèÜ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ *–ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã*:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ê–Ω–≥–ª–∏—è*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_team1.set()

async def process_team1(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    team1 = message.text.strip()
    
    if len(team1) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(team1=team1)
    
    await message.answer(
        f"‚úÖ –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: *{team1}*\n\n"
        "üèÜ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ *–≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã*:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ò—Å–ø–∞–Ω–∏—è*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_team2.set()

async def process_team2(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    team2 = message.text.strip()
    
    if len(team2) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    tournament_id = user_data.get('tournament_id')
    tournament_name = user_data.get('tournament_name')
    match_date = user_data.get('match_date')
    match_time = user_data.get('match_time')
    team1 = user_data.get('team1')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –≤ –±–∞–∑—É
    success = await db.add_match(tournament_id, match_date, match_time, team1, team2)
    
    if success:
        await message.answer(
            f"‚úÖ –ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä *{tournament_name}*!\n\n"
            f"üìÖ *–î–∞—Ç–∞:* {match_date}\n"
            f"üïí *–í—Ä–µ–º—è:* {match_time}\n"
            f"‚öΩ *–ú–∞—Ç—á:* {team1} - {team2}",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞!",
            reply_markup=get_main_menu()
        )
    
    await state.finish()

async def show_tournament_matches(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = int(callback.data.split('_')[1])
    tournament = await db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    matches = await db.get_matches_by_tournament(tournament_id)
    is_admin = callback.from_user.id == config.ADMIN_ID
    
    if not matches:
        await callback.message.edit_text(
            f"‚öΩ *{tournament['name']}*\n\n"
            "üì≠ –í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.",
            parse_mode="Markdown",
            reply_markup=get_tournament_matches_keyboard(matches, tournament_id, is_admin)
        )
    else:
        matches_text = f"‚öΩ *{tournament['name']}*\n\n"
        matches_text += "üìã *–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:*\n\n"
        
        for i, match in enumerate(matches, 1):
            matches_text += f"{i}. {match['match_date']} {match['match_time']} {match['team1']} - {match['team2']}\n"
        
        await callback.message.edit_text(
            matches_text,
            parse_mode="Markdown",
            reply_markup=get_tournament_matches_keyboard(matches, tournament_id, is_admin)
        )
    
    await callback.answer()

async def matches_back(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏"""
    await state.finish()
    from handlers.tournaments import show_tournaments
    await show_tournaments(callback.message)
    await callback.answer()

def register_handlers_matches(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ç—á–µ–π"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(start_add_match, lambda c: c.data.startswith('add_match_'))
    dp.register_callback_query_handler(select_tournament_for_match, lambda c: c.data.startswith('select_tournament_'))
    dp.register_callback_query_handler(show_tournament_matches, lambda c: c.data.startswith('tournament_matches_'))
    dp.register_callback_query_handler(matches_back, lambda c: c.data == 'matches_back')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞
    dp.register_message_handler(process_match_date, state=MatchStates.waiting_for_match_date)
    dp.register_message_handler(process_match_time, state=MatchStates.waiting_for_match_time)
    dp.register_message_handler(process_team1, state=MatchStates.waiting_for_team1)
    dp.register_message_handler(process_team2, state=MatchStates.waiting_for_team2)