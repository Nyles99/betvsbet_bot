from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from states import MatchStates
from keyboards import (
    get_cancel_match_keyboard, 
    get_main_menu,
    get_tournaments_for_matches_keyboard
)
from config_bot import config

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == config.ADMIN_ID

async def add_match(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):\n\n"
        "–ü—Ä–∏–º–µ—Ä: *25.12.2024*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await state.update_data(tournament_id=tournament_id)
    await MatchStates.waiting_for_match_date.set()
    await callback.answer()

async def process_match_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    match_date = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
    if len(match_date) != 10 or match_date[2] != '.' or match_date[5] != '.':
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
            "–ü—Ä–∏–º–µ—Ä: *25.12.2024*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(match_date=match_date)
    
    await message.answer(
        "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (–ß–ß:–ú–ú):\n\n"
        "–ü—Ä–∏–º–µ—Ä: *20:30*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_match_time.set()

async def process_match_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    match_time = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    if len(match_time) != 5 or match_time[2] != ':':
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n\n"
            "–ü—Ä–∏–º–µ—Ä: *20:30*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(match_time=match_time)
    
    await message.answer(
        "‚öΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ë—Ä–∞–∑–∏–ª–∏—è*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_team1.set()

async def process_team1(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    team1 = message.text.strip()
    
    if len(team1) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    await state.update_data(team1=team1)
    
    await message.answer(
        "‚öΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "–ü—Ä–∏–º–µ—Ä: *–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await MatchStates.waiting_for_team2.set()

async def process_team2(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    team2 = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    tournament_id = user_data.get('tournament_id')
    match_date = user_data.get('match_date')
    match_time = user_data.get('match_time')
    team1 = user_data.get('team1')
    
    if len(team2) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 2 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_match_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á –≤ –±–∞–∑—É
    success = await db.add_match(tournament_id, match_date, match_time, team1, team2)
    
    if success:
        await state.finish()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        tournament = await db.get_tournament_by_id(tournament_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer(
            f"‚úÖ –ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä '{tournament['name']}'!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–º
        keyboard = InlineKeyboardMarkup()
        back_btn = InlineKeyboardButton(
            'üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–º', 
            callback_data=f'tournament_manage_{tournament_id}'
        )
        keyboard.add(back_btn)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞!",
            reply_markup=get_main_menu()
        )
        await state.finish()

async def admin_add_match(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ - –≤—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤!\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π.",
            parse_mode="Markdown"
        )
        return
    
    await callback.message.edit_text(
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞:",
        parse_mode="Markdown",
        reply_markup=get_tournaments_for_matches_keyboard(tournaments)
    )
    
    await callback.answer()

async def select_tournament_for_match(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournament_id = int(callback.data.split('_')[2])
    
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):\n\n"
        "–ü—Ä–∏–º–µ—Ä: *25.12.2024*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await state.update_data(tournament_id=tournament_id)
    await MatchStates.waiting_for_match_date.set()
    await callback.answer()

async def admin_view_matches(callback: types.CallbackQuery):
    """–ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—Ç—á–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    tournaments = await db.get_all_tournaments()
    
    if not tournaments:
        await callback.message.edit_text(
            "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –º–∞—Ç—á–∞–º–∏.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    matches_text = "üìã –í—Å–µ –º–∞—Ç—á–∏ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º:\n\n"
    
    for tournament in tournaments:
        matches = await db.get_matches_by_tournament(tournament['id'])
        
        matches_text += f"üèÜ *{tournament['name']}* ({len(matches)} –º–∞—Ç—á–µ–π):\n"
        
        if matches:
            for i, match in enumerate(matches, 1):
                matches_text += (
                    f"  {i}. {match['match_date']} {match['match_time']} "
                    f"{match['team1']} vs {match['team2']}\n"
                )
        else:
            matches_text += "  –ú–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        matches_text += "\n"
    
    await callback.message.edit_text(
        matches_text,
        parse_mode="Markdown"
    )
    await callback.answer()

async def matches_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    from handlers.admin import show_admin_panel
    await show_admin_panel(callback)

async def admin_match_management(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ç—á–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    match_id = int(callback.data.split('_')[2])
    match = await db.get_match_by_id(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    bets = await db.get_bets_by_match(match_id)
    
    match_text = (
        f"üëë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–º*\n\n"
        f"‚öΩ *–ú–∞—Ç—á:* {match['team1']} vs {match['team2']}\n"
        f"üèÜ *–¢—É—Ä–Ω–∏—Ä:* {tournament['name']}\n"
        f"üìÖ *–î–∞—Ç–∞:* {match['match_date']}\n"
        f"üïí *–í—Ä–µ–º—è:* {match['match_time']}\n"
        f"üéØ *–°—Ç–∞–≤–æ–∫ —Å–¥–µ–ª–∞–Ω–æ:* {len(bets)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    view_bets_btn = InlineKeyboardButton('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏', callback_data=f'admin_view_bets_{match_id}')
    delete_match_btn = InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –º–∞—Ç—á', callback_data=f'admin_delete_match_{match_id}')
    back_btn = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'tournament_matches_{match["tournament_id"]}')
    
    keyboard.add(view_bets_btn, delete_match_btn)
    keyboard.add(back_btn)
    
    await callback.message.edit_text(
        match_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def admin_delete_match_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    match_id = int(callback.data.split('_')[3])
    match = await db.get_match_by_id(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    tournament = await db.get_tournament_by_id(match['tournament_id'])
    bets = await db.get_bets_by_match(match_id)
    
    warning_text = (
        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞*\n\n"
        f"‚öΩ *–ú–∞—Ç—á:* {match['team1']} vs {match['team2']}\n"
        f"üèÜ *–¢—É—Ä–Ω–∏—Ä:* {tournament['name']}\n"
        f"üìÖ *–î–∞—Ç–∞:* {match['match_date']} {match['match_time']}\n\n"
        f"‚ùå *–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:*\n"
        f"‚Ä¢ –ú–∞—Ç—á –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞\n"
        f"‚Ä¢ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á ({len(bets)} —à—Ç.)\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ?"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    confirm_btn = InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'admin_delete_confirm_{match_id}')
    cancel_btn = InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'admin_match_{match_id}')
    
    keyboard.add(confirm_btn, cancel_btn)
    
    await callback.message.edit_text(
        warning_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

async def admin_delete_match_execute(callback: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    match_id = int(callback.data.split('_')[3])
    match = await db.get_match_by_id(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
    success = await db.delete_match(match_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ *–ú–∞—Ç—á —É–¥–∞–ª–µ–Ω!*\n\n"
            f"‚öΩ {match['team1']} vs {match['team2']}\n\n"
            f"–ú–∞—Ç—á –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            parse_mode="Markdown"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
        from handlers.tournaments import show_tournament_matches
        
        # –°–æ–∑–¥–∞–µ–º mock callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        class MockCallback:
            def __init__(self, message, tournament_id):
                self.message = message
                self.data = f'tournament_matches_{tournament_id}'
                self.from_user = message.from_user
        
        mock_callback = MockCallback(callback.message, match['tournament_id'])
        await show_tournament_matches(mock_callback)
        
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞!",
            parse_mode="Markdown"
        )
    
    await callback.answer()

async def add_another_match(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ –≤ —Ç–æ—Ç –∂–µ —Ç—É—Ä–Ω–∏—Ä"""
    tournament_id = int(callback.data.split('_')[2])
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ –∑–∞–Ω–æ–≤–æ
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):\n\n"
        "–ü—Ä–∏–º–µ—Ä: *25.12.2024*",
        parse_mode="Markdown",
        reply_markup=get_cancel_match_keyboard()
    )
    
    await state.update_data(tournament_id=tournament_id)
    await MatchStates.waiting_for_match_date.set()
    await callback.answer()

def register_handlers_matches(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ç—á–µ–π"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
    dp.register_callback_query_handler(add_match, lambda c: c.data.startswith('add_match_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞
    dp.register_message_handler(process_match_date, state=MatchStates.waiting_for_match_date)
    dp.register_message_handler(process_match_time, state=MatchStates.waiting_for_match_time)
    dp.register_message_handler(process_team1, state=MatchStates.waiting_for_team1)
    dp.register_message_handler(process_team2, state=MatchStates.waiting_for_team2)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –º–∞—Ç—á–µ–π
    dp.register_callback_query_handler(admin_add_match, lambda c: c.data == 'admin_add_match')
    dp.register_callback_query_handler(admin_view_matches, lambda c: c.data == 'admin_view_matches')
    dp.register_callback_query_handler(select_tournament_for_match, lambda c: c.data.startswith('select_tournament_'))
    dp.register_callback_query_handler(matches_back, lambda c: c.data == 'matches_back')
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    dp.register_callback_query_handler(admin_match_management, lambda c: c.data.startswith('admin_match_'))
    dp.register_callback_query_handler(admin_delete_match_confirm, lambda c: c.data.startswith('admin_delete_match_'))
    dp.register_callback_query_handler(admin_delete_match_execute, lambda c: c.data.startswith('admin_delete_confirm_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞
    dp.register_callback_query_handler(
        add_another_match, 
        lambda c: c.data.startswith('add_match_'),
        state="*"
    )