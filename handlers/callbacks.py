from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageNotModified
from database.db_handler import DatabaseHandler
from keyboards.menu import (
    get_main_inline_keyboard, 
    get_profile_inline_keyboard, 
    get_user_tournaments_keyboard,
    get_user_tournament_matches_keyboard,
    get_available_matches_keyboard,
    get_user_bets_tournaments_keyboard,
    get_user_tournament_bets_keyboard,
    get_back_keyboard
)
from states.user_states import ProfileStates, UserBetStates
from utils.validators import validate_username, validate_full_name, validate_score

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ MessageNotModified
    """
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except MessageNotModified:
        pass

async def navigation_handler(callback: CallbackQuery, state: FSMContext, section: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
    """
    if state:
        await state.finish()
    
    navigation_config = {
        'main_menu': {
            'text': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            'keyboard': get_main_inline_keyboard
        },
        'profile': {
            'text': "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            'keyboard': get_profile_inline_keyboard
        },
        'tournaments': {
            'text': "üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á–∏\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:",
            'keyboard': lambda: get_user_tournaments_keyboard(DatabaseHandler('users.db').get_all_tournaments())
        },
        'my_bets': {
            'text': "üìã –ú–æ–∏ —Å—Ç–∞–≤–∫–∏",
            'keyboard': lambda: get_user_bets_tournaments_keyboard(
                DatabaseHandler('users.db').get_user_tournaments_with_bets(callback.from_user.id)
            )
        },
        'help': {
            'text': """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üì± **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:** –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω, –§–ò–û –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏
üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –º–∞—Ç—á–µ–π –∏ –≤–≤–æ–¥ —Å—Ç–∞–≤–æ–∫
üìã **–ú–æ–∏ —Å—Ç–∞–≤–∫–∏:** –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º

üìù **–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "üèÜ –¢—É—Ä–Ω–∏—Ä—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä  
3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –∏–∑ —Å–ø–∏—Å–∫–∞
4. –í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1)
            """,
            'keyboard': lambda: get_back_keyboard()
        },
        'about': {
            'text': """
üìû **–û –Ω–∞—Å**

–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤. 

üéØ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:** –°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.

üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã.

‚öΩ **–°—Ç–∞–≤–∫–∏:** –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π.

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
            """,
            'keyboard': lambda: get_back_keyboard()
        }
    }
    
    if section in navigation_config:
        config = navigation_config[section]
        keyboard = config['keyboard']() if callable(config['keyboard']) else config['keyboard']
        await safe_edit_message(callback, config['text'], keyboard)

# –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def main_menu_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'main_menu')

async def profile_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'profile')

async def tournaments_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'tournaments')

async def my_bets_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'my_bets')

async def help_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'help')

async def about_handler(callback: CallbackQuery, state: FSMContext = None):
    await navigation_handler(callback, state, 'about')

async def my_profile_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if user:
        user_bets = db.get_user_bets(user_id)
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone_number}
üë§ **–õ–æ–≥–∏–Ω:** {user.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìõ **–§–ò–û:** {user.full_name or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date}
‚öΩ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:** {len(user_bets)}
        """
        await safe_edit_message(callback, profile_text, get_profile_inline_keyboard())
    else:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def user_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    all_matches = db.get_tournament_matches(tournament_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É
    available_matches = []
    for match in all_matches:
        user_bet = db.get_user_bet(user_id, match[0])
        if not user_bet:
            available_matches.append(match)
    
    if tournament:
        if available_matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
            if tournament[2]:
                text += f"üìù {tournament[2]}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞:\n\n"
            
            for match in available_matches:
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
        else:
            text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\n"
            if tournament[2]:
                text += f"üìù {tournament[2]}\n\n"
            
            if all_matches:
                text += "‚úÖ –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞!\n\n"
                text += "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –ú–æ–∏ —Å—Ç–∞–≤–∫–∏' –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
            else:
                text += "–í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        
        await safe_edit_message(
            callback,
            text,
            get_user_tournament_matches_keyboard(tournament_id, available_matches)
        )
    else:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def user_match_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞"""
    await state.finish()
    
    match_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if match:
        tournament = db.get_tournament(match[1])
        user_bet = db.get_user_bet(user_id, match_id)
        
        if user_bet:
            text = f"""
‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}
üî∞ –°—Ç–∞—Ç—É—Å: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω

‚úÖ –í–∞—à —Å—á–µ—Ç: {user_bet[3]}
üìÖ –î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {user_bet[4]}
            """
            await safe_edit_message(
                callback,
                text,
                get_back_keyboard(f"user_tournament_{match[1]}", "üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É")
            )
        else:
            text = f"""
‚öΩ –í–≤–æ–¥ —Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}

üìù –í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1) –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
            """
            
            async with state.proxy() as data:
                data['match_id'] = match_id
                data['match_info'] = f"{match[4]} vs {match[5]}"
                data['tournament_id'] = match[1]
            
            await safe_edit_message(
                callback,
                text,
                get_back_keyboard(f"user_tournament_{match[1]}", "üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É")
            )
            await UserBetStates.waiting_for_score.set()
    else:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def bets_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    tournament = db.get_tournament(tournament_id)
    bets = db.get_tournament_bets_by_user(user_id, tournament_id)
    
    if tournament and bets:
        text = f"üìã –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament[1]}\n\n"
        
        for bet in bets:
            text += f"üìÖ {bet[5]} | {bet[6]} | {bet[7]} vs {bet[8]} | –°—á–µ—Ç: {bet[3]}\n\n"
        
        await safe_edit_message(
            callback,
            text,
            get_user_tournament_bets_keyboard(tournament_id, bets)
        )
    else:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)

async def change_username_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
    await safe_edit_message(
        callback,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, 3-20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        get_back_keyboard()
    )
    await ProfileStates.waiting_for_username.set()

async def change_fullname_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    await safe_edit_message(
        callback,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, 2-100 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        get_back_keyboard()
    )
    await ProfileStates.waiting_for_full_name.set()

async def process_score_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—á–µ—Ç–æ–º –∏–∑ —á–∞—Ç–∞"""
    score = message.text.strip()
    
    if not validate_score(score):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    async with state.proxy() as data:
        match_id = data['match_id']
        match_info = data['match_info']
        tournament_id = data.get('tournament_id')
    
    db = DatabaseHandler('users.db')
    user_id = message.from_user.id
    
    if db.add_user_bet(user_id, match_id, score):
        await message.answer(
            f"‚úÖ –°—á–µ—Ç {score} –¥–ª—è –º–∞—Ç—á–∞ {match_info} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
        tournament = db.get_tournament(tournament_id)
        all_matches = db.get_tournament_matches(tournament_id)
        
        available_matches = []
        for match in all_matches:
            user_bet = db.get_user_bet(user_id, match[0])
            if not user_bet:
                available_matches.append(match)
        
        if available_matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞:\n\n"
            for match in available_matches:
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
        else:
            text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\n‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞!\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –ú–æ–∏ —Å—Ç–∞–≤–∫–∏' –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
        
        await message.answer(
            text,
            reply_markup=get_user_tournament_matches_keyboard(tournament_id, available_matches)
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard(f"user_tournament_{tournament_id}", "üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É")
        )
    
    await state.finish()

def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    dp.register_callback_query_handler(main_menu_handler, lambda c: c.data == "main_menu", state="*")
    dp.register_callback_query_handler(profile_handler, lambda c: c.data == "profile", state="*")
    dp.register_callback_query_handler(tournaments_handler, lambda c: c.data == "tournaments", state="*")
    dp.register_callback_query_handler(my_bets_handler, lambda c: c.data == "my_bets", state="*")
    dp.register_callback_query_handler(help_handler, lambda c: c.data == "help", state="*")
    dp.register_callback_query_handler(about_handler, lambda c: c.data == "about", state="*")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_callback_query_handler(my_profile_callback, lambda c: c.data == "my_profile", state="*")
    dp.register_callback_query_handler(bets_tournament_detail_callback, lambda c: c.data.startswith("bets_tournament_"), state="*")
    dp.register_callback_query_handler(change_username_callback, lambda c: c.data == "change_username", state="*")
    dp.register_callback_query_handler(change_fullname_callback, lambda c: c.data == "change_fullname", state="*")
    dp.register_callback_query_handler(user_tournament_detail_callback, lambda c: c.data.startswith("user_tournament_"), state="*")
    dp.register_callback_query_handler(user_match_detail_callback, lambda c: c.data.startswith("user_match_"), state="*")
    
    # FSM –¥–ª—è —Å—Ç–∞–≤–æ–∫
    dp.register_message_handler(process_score_message, state=UserBetStates.waiting_for_score)