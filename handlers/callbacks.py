from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageNotModified
from database.db_handler import DatabaseHandler
from keyboards.menu import (
    get_main_inline_keyboard,
    get_profile_inline_keyboard,
    get_tournaments_main_keyboard,
    get_all_tournaments_keyboard,
    get_my_tournaments_keyboard,
    get_user_tournament_matches_keyboard,
    get_tournament_detail_keyboard,
    get_tournament_players_keyboard,
    get_back_keyboard
)
from states.user_states import ProfileStates, UserBetStates
from utils.validators import validate_username, validate_score
import hashlib

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except MessageNotModified:
        pass

async def handle_navigation(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    await state.finish()
    
    navigation_config = {
        "main_menu": {
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "keyboard": get_main_inline_keyboard()
        },
        "profile": {
            "text": "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "keyboard": get_profile_inline_keyboard()
        },
        "tournaments_main": {
            "text": "üèÜ –†–∞–∑–¥–µ–ª —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            "keyboard": get_tournaments_main_keyboard()
        },
        "all_tournaments": {
            "text": "üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
            "keyboard": get_all_tournaments_keyboard(DatabaseHandler('users.db').get_all_tournaments())
        },
        "my_tournaments": {
            "text": "üèÜ –í–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            "keyboard": get_my_tournaments_keyboard(
                DatabaseHandler('users.db').get_user_tournaments_with_bets(callback.from_user.id)
            )
        },
        "help": {
            "text": """ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üì± **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** 
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ª–æ–≥–∏–Ω
‚Ä¢ –ù–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX
‚Ä¢ –õ–æ–≥–∏–Ω: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã (3-20 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –§–ò–û: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è

üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:** –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** 
‚Ä¢ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã - –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
‚Ä¢ –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã - –≤—ã–±–æ—Ä –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤

üìù **–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:**
1. –¢—É—Ä–Ω–∏—Ä—ã ‚Üí –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä
3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á
4. –í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç (—Ñ–æ—Ä–º–∞—Ç X-Y)

–ü–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã""",
            "keyboard": get_back_keyboard()
        },
        "about": {
            "text": """üìû **–û –Ω–∞—Å**

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤.

üéØ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:** –°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º.

üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã.

‚öΩ **–°—Ç–∞–≤–∫–∏:** –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π.

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!""",
            "keyboard": get_back_keyboard()
        }
    }
    
    if callback.data in navigation_config:
        config = navigation_config[callback.data]
        await safe_edit_message(callback, config["text"], config["keyboard"])

async def my_profile_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if user:
        user_bets = db.get_user_bets(user_id)
        user_tournaments = db.get_user_tournaments_with_bets(user_id)
        
        profile_text = f"""üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone_number}
üë§ **–õ–æ–≥–∏–Ω:** {user.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìõ **–§–ò–û:** {user.full_name or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.registration_date}
‚öΩ **–°—Ç–∞–≤–æ–∫:** {len(user_bets)}
üèÜ **–¢—É—Ä–Ω–∏—Ä–æ–≤:** {len(user_tournaments)}"""
        
        await safe_edit_message(callback, profile_text, get_profile_inline_keyboard())
    else:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def all_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã'"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π
    available_matches = db.get_available_tournament_matches(tournament_id, user_id)
    all_matches = db.get_tournament_matches(tournament_id)
    
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n"
    if tournament[2]:
        text += f"üìù {tournament[2]}\n\n"
    
    if available_matches:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞:\n\n"
        for match in available_matches:
            text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
    else:
        if all_matches:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–µ–∫—à–∏–µ –º–∞—Ç—á–∏ –±–µ–∑ —Å—Ç–∞–≤–æ–∫
            expired_without_bets = False
            for match in all_matches:
                if db.is_match_expired(match[2], match[3]):
                    user_bet = db.get_user_bet(user_id, match[0])
                    if not user_bet:
                        expired_without_bets = True
                        break
            
            if expired_without_bets:
                text += "‚è∞ –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç—á–∏ –∏—Å—Ç–µ–∫–ª–æ.\n\n"
            text += "‚úÖ –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏!\n\n"
            text += "–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ 'üèÜ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã'"
        else:
            text += "–í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    
    await safe_edit_message(
        callback,
        text,
        get_user_tournament_matches_keyboard(tournament_id, available_matches, "all_tournaments")
    )

async def my_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã'"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[3])
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    user_bets_count = len(db.get_tournament_bets_by_user(callback.from_user.id, tournament_id))
    
    text = f"""üèÜ –î–µ—Ç–∞–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞:

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament[1]}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament[2] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üî∞ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π' if tournament[3] == 'active' else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
üìä –í–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫: {user_bets_count}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"""
    
    await safe_edit_message(
        callback,
        text,
        get_tournament_detail_keyboard(tournament_id)
    )

async def tournament_my_bets_callback(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[3])
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    tournament = db.get_tournament(tournament_id)
    bets = db.get_tournament_bets_by_user(user_id, tournament_id)
    
    if tournament and bets:
        text = f"üìã –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament[1]}\n\n"
        
        for bet in bets:
            text += f"üìÖ {bet[5]} | {bet[6]} | {bet[7]} vs {bet[8]} | –°—á–µ—Ç: {bet[3]}\n\n"
        
        await safe_edit_message(
            callback,
            text,
            get_tournament_detail_keyboard(tournament_id)
        )
    else:
        text = f"üìã –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫."
        await safe_edit_message(
            callback,
            text,
            get_tournament_detail_keyboard(tournament_id)
        )

async def tournament_players_callback(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    await state.finish()
    
    parts = callback.data.split('_')
    tournament_id = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 0
    if len(parts) > 3:
        try:
            page = int(parts[3])
        except (ValueError, IndexError):
            page = 0
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    
    if not tournament:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    users = db.get_tournament_participants(tournament_id)
    
    if users:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 10
        total_pages = (len(users) + users_per_page - 1) // users_per_page
        start_index = page * users_per_page
        end_index = start_index + users_per_page
        current_users = users[start_index:end_index]
        
        text = f"üë• –ò–≥—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
        text += f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}\n\n"
        
        for i, user in enumerate(current_users, start_index + 1):
            user_info = f"{i}. ID: {user.user_id}"
            if user.username:
                user_info += f", üë§: @{user.username}"
            user_info += "\n"
            text += user_info
        
        await safe_edit_message(
            callback,
            text,
            get_tournament_players_keyboard(tournament_id, page, total_pages, len(users))
        )
    else:
        text = f"üë• –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        await safe_edit_message(
            callback,
            text,
            get_tournament_detail_keyboard(tournament_id)
        )

async def tournament_leaderboard_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[3])
    
    text = """üìä –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–∞

‚è≥ –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"""
    
    await safe_edit_message(
        callback,
        text,
        get_tournament_detail_keyboard(tournament_id)
    )

async def tournament_rules_callback(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await state.finish()
    
    tournament_id = int(callback.data.split('_')[3])
    
    text = """üìñ –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞

‚è≥ –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞.

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"""
    
    await safe_edit_message(
        callback,
        text,
        get_tournament_detail_keyboard(tournament_id)
    )

async def user_match_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    match_id = int(callback.data.split('_')[2])
    user_id = callback.from_user.id
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if not match:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
    if db.is_match_expired(match[2], match[3]):
        await callback.answer("‚è∞ –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –∏—Å—Ç–µ–∫–ª–æ.", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π
        tournament = db.get_tournament(match[1])
        available_matches = db.get_available_tournament_matches(match[1], user_id)
        
        text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\n"
        text += "‚è∞ –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á –∏—Å—Ç–µ–∫–ª–æ.\n\n"
        
        if available_matches:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞—Ç—á:\n\n"
            for available_match in available_matches:
                text += f"üìÖ {available_match[2]} {available_match[3]} - {available_match[4]} vs {available_match[5]}\n\n"
        
        await safe_edit_message(
            callback,
            text,
            get_user_tournament_matches_keyboard(match[1], available_matches, "all_tournaments")
        )
        return
    
    tournament = db.get_tournament(match[1])
    user_bet = db.get_user_bet(user_id, match_id)
    
    if user_bet:
        text = f"""‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}

‚úÖ –í–∞—à —Å—á–µ—Ç: {user_bet[3]}
üìÖ –î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {user_bet[4]}"""
        
        await safe_edit_message(
            callback,
            text,
            get_back_keyboard(f"all_tournament_{match[1]}", "üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É")
        )
    else:
        text = f"""‚öΩ –í–≤–æ–¥ —Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}

üìù –í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1):"""
        
        async with state.proxy() as data:
            data['match_id'] = match_id
            data['match_info'] = f"{match[4]} vs {match[5]}"
            data['tournament_id'] = match[1]
        
        await safe_edit_message(
            callback,
            text,
            get_back_keyboard(f"all_tournament_{match[1]}", "üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É")
        )
        await UserBetStates.waiting_for_score.set()

async def change_username_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
    await safe_edit_message(
        callback,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, 3-20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        get_back_keyboard()
    )
    await ProfileStates.waiting_for_username.set()

async def change_password_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    await safe_edit_message(
        callback,
        "üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        get_back_keyboard()
    )
    async with state.proxy() as data:
        data['step'] = 'waiting_current_password'
    await ProfileStates.waiting_for_password.set()

async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞"""
    new_username = message.text.strip()
    
    if not validate_username(new_username):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (3-20 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    
    db = DatabaseHandler('users.db')
    user_id = message.from_user.id
    
    if db.is_username_taken(new_username):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    
    if db.update_profile(user_id, username=new_username):
        await message.answer(
            "‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await message.answer(
            "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_profile_inline_keyboard()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞.")
    
    await state.finish()

async def process_password_change(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"""
    password = message.text.strip()
    
    async with state.proxy() as data:
        current_step = data.get('step', 'waiting_current_password')
    
    db = DatabaseHandler('users.db')
    user_id = message.from_user.id
    
    if current_step == 'waiting_current_password':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        hashed_current_password = hash_password(password)
        if not db.verify_password(user_id, hashed_current_password):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        async with state.proxy() as data:
            data['step'] = 'waiting_new_password'
        
        await message.answer("‚úÖ –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    elif current_step == 'waiting_new_password':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        if len(password) < 6:
            await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –•–µ—à–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        hashed_new_password = hash_password(password)
        
        if db.update_user_password(user_id, hashed_new_password):
            await message.answer(
                "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await message.answer(
                "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_profile_inline_keyboard()
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await state.finish()

async def process_score_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—á–µ—Ç–æ–º"""
    score = message.text.strip()
    
    if not validate_score(score):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    async with state.proxy() as data:
        match_id = data['match_id']
        match_info = data['match_info']
        tournament_id = data['tournament_id']
    
    db = DatabaseHandler('users.db')
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏
    match = db.get_match(match_id)
    if match and db.is_match_expired(match[2], match[3]):
        await message.answer(
            "‚è∞ –í—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –∏—Å—Ç–µ–∫–ª–æ. –°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π
        tournament = db.get_tournament(tournament_id)
        available_matches = db.get_available_tournament_matches(tournament_id, user_id)
        
        text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\n"
        
        if available_matches:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ç—á:\n\n"
            for available_match in available_matches:
                text += f"üìÖ {available_match[2]} {available_match[3]} - {available_match[4]} vs {available_match[5]}\n\n"
        
        await message.answer(
            text,
            reply_markup=get_user_tournament_matches_keyboard(tournament_id, available_matches, "all_tournaments")
        )
        await state.finish()
        return
    
    if db.add_user_bet(user_id, match_id, score):
        await message.answer(
            f"‚úÖ –°—á–µ—Ç {score} –¥–ª—è –º–∞—Ç—á–∞ {match_info} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏
        tournament = db.get_tournament(tournament_id)
        available_matches = db.get_available_tournament_matches(tournament_id, user_id)
        
        if available_matches:
            text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\n‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á:\n\n"
            for match in available_matches:
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
            
            await message.answer(
                text,
                reply_markup=get_user_tournament_matches_keyboard(tournament_id, available_matches, "all_tournaments")
            )
        else:
            text = f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏!\n\n–¢–µ–ø–µ—Ä—å —Ç—É—Ä–Ω–∏—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ 'üèÜ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã'"
            
            await message.answer(
                text,
                reply_markup=get_back_keyboard("tournaments_main", "üîô –í —Ä–∞–∑–¥–µ–ª —Ç—É—Ä–Ω–∏—Ä–æ–≤")
            )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.finish()

async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.finish()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_profile_inline_keyboard()
    )

async def no_action_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer("‚è≥ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    navigation_handlers = [
        "main_menu", "profile", "tournaments_main", 
        "all_tournaments", "my_tournaments", "help", "about"
    ]
    
    for handler in navigation_handlers:
        dp.register_callback_query_handler(
            handle_navigation, 
            lambda c, h=handler: c.data == h, 
            state="*"
        )
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.register_callback_query_handler(my_profile_callback, lambda c: c.data == "my_profile", state="*")
    dp.register_callback_query_handler(change_username_callback, lambda c: c.data == "change_username", state="*")
    dp.register_callback_query_handler(change_password_callback, lambda c: c.data == "change_password", state="*")
    
    # –¢—É—Ä–Ω–∏—Ä—ã
    dp.register_callback_query_handler(all_tournament_detail_callback, lambda c: c.data.startswith("all_tournament_"), state="*")
    dp.register_callback_query_handler(my_tournament_detail_callback, lambda c: c.data.startswith("my_tournament_detail_"), state="*")
    dp.register_callback_query_handler(tournament_my_bets_callback, lambda c: c.data.startswith("tournament_my_bets_"), state="*")
    dp.register_callback_query_handler(tournament_players_callback, lambda c: c.data.startswith("tournament_players_"), state="*")
    dp.register_callback_query_handler(tournament_leaderboard_callback, lambda c: c.data.startswith("tournament_leaderboard_"), state="*")
    dp.register_callback_query_handler(tournament_rules_callback, lambda c: c.data.startswith("tournament_rules_"), state="*")
    
    # –ú–∞—Ç—á–∏ –∏ —Å—Ç–∞–≤–∫–∏
    dp.register_callback_query_handler(user_match_detail_callback, lambda c: c.data.startswith("user_match_"), state="*")
    
    # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_message_handler(process_username, state=ProfileStates.waiting_for_username)
    dp.register_message_handler(process_password_change, state=ProfileStates.waiting_for_password)
    dp.register_message_handler(process_score_message, state=UserBetStates.waiting_for_score)
    
    # –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    dp.register_callback_query_handler(cancel_operation, lambda c: c.data == "main_menu", state=[ProfileStates.waiting_for_username, ProfileStates.waiting_for_password])
    
    # –ö–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
    dp.register_callback_query_handler(no_action_callback, lambda c: c.data == "no_action")
