from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from database.db_handler import DatabaseHandler
from keyboards.menu import (
    get_main_inline_keyboard,
    get_match_bet_keyboard, 
    get_profile_inline_keyboard, 
    get_back_inline_keyboard,
    get_user_tournaments_keyboard,
    get_user_tournament_matches_keyboard,
    get_available_matches_keyboard,
    get_bet_score_keyboard,
    get_user_bets_tournaments_keyboard,
    get_user_tournament_bets_keyboard
)
from states.user_states import ProfileStates, UserBetStates
from utils.validators import validate_username, validate_full_name, validate_score

async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_inline_keyboard()
    )

async def profile_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    await callback.message.edit_text(
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_profile_inline_keyboard()
    )

async def my_profile_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    
    if user:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_bets = db.get_user_bets(user_id)
        
        profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {user.phone_number}
üë§ **–õ–æ–≥–∏–Ω:** {user.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìõ **–§–ò–û:** {user.full_name or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user.registration_date}
‚öΩ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫:** {len(user_bets)}
        """
        await callback.message.edit_text(
            profile_text,
            parse_mode='Markdown',
            reply_markup=get_profile_inline_keyboard()
        )
    else:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def my_bets_callback(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ —Å—Ç–∞–≤–∫–∏ - —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    tournaments = db.get_user_tournaments_with_bets(user_id)
    
    if tournaments:
        text = "üèÜ –í–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–≤–æ–∫:"
        await callback.message.edit_text(
            text,
            reply_markup=get_user_bets_tournaments_keyboard(tournaments)
        )
    else:
        text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫.\n\n–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öΩ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'!"
        await callback.message.edit_text(
            text,
            reply_markup=get_back_inline_keyboard()
        )

async def bets_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª–∏ —Å—Ç–∞–≤–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    tournament = db.get_tournament(tournament_id)
    bets = db.get_tournament_bets_by_user(user_id, tournament_id)
    
    if tournament and bets:
        text = f"üìã –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {tournament[1]}\n\n"
        
        for bet in bets:
            text += f"üìÖ {bet[5]} | {bet[6]} | {bet[7]} vs {bet[8]} | –°—á–µ—Ç: {bet[3]}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_user_tournament_bets_keyboard(tournament_id, bets)
        )
    else:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)

async def change_username_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, 3-20 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        reply_markup=get_back_inline_keyboard()
    )
    await ProfileStates.waiting_for_username.set()

async def change_fullname_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, 2-100 —Å–∏–º–≤–æ–ª–æ–≤):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
        reply_markup=get_back_inline_keyboard()
    )
    await ProfileStates.waiting_for_full_name.set()

async def tournaments_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    db = DatabaseHandler('users.db')
    tournaments = db.get_all_tournaments()
    
    if tournaments:
        text = "üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
        for tournament in tournaments:
            matches_count = len(db.get_tournament_matches(tournament[0]))
            text += f"‚Ä¢ {tournament[1]}\n"
            if tournament[2]:  # –æ–ø–∏—Å–∞–Ω–∏–µ
                text += f"  üìù {tournament[2]}\n"
            text += f"  ‚öΩ –ú–∞—Ç—á–µ–π: {matches_count}\n"
            text += f"  üìÖ –°–æ–∑–¥–∞–Ω: {tournament[4]}\n\n"
    else:
        text = "üèÜ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_user_tournaments_keyboard(tournaments)
    )

async def make_bet_callback(callback: CallbackQuery, state: FSMContext):
    """–†–∞–∑–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–æ–∫"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    db = DatabaseHandler('users.db')
    user_id = callback.from_user.id
    available_matches = db.get_available_matches_for_user(user_id)
    
    if available_matches:
        text = "‚öΩ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞:"
        await callback.message.edit_text(
            text,
            reply_markup=get_available_matches_keyboard(available_matches)
        )
    else:
        text = "‚öΩ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫.\n\n–í—Å–µ –º–∞—Ç—á–∏ —É–∂–µ –∏–º–µ—é—Ç –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å."
        await callback.message.edit_text(
            text,
            reply_markup=get_back_inline_keyboard()
        )

async def bet_match_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏"""
    match_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if match:
        tournament = db.get_tournament(match[1])
        text = f"""
‚öΩ –í–≤–æ–¥ —Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 1: {match[4]}
üèÜ –ö–æ–º–∞–Ω–¥–∞ 2: {match[5]}

–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä 3-2:
        """
        
        async with state.proxy() as data:
            data['match_id'] = match_id
            data['match_info'] = f"{match[4]} vs {match[5]}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_bet_score_keyboard(match_id)
        )
        await UserBetStates.waiting_for_score.set()
    else:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def process_score_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await callback.answer()

async def process_score_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—á–µ—Ç–æ–º"""
    score = message.text.strip()
    
    if not validate_score(score):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    async with state.proxy() as data:
        match_id = data['match_id']
        match_info = data['match_info']
    
    db = DatabaseHandler('users.db')
    user_id = message.from_user.id
    
    if db.add_user_bet(user_id, match_id, score):
        await message.answer(
            f"‚úÖ –°—á–µ—Ç {score} –¥–ª—è –º–∞—Ç—á–∞ {match_info} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match = db.get_match(match_id)
        tournament = db.get_tournament(match[1])
        user_bet = db.get_user_bet(user_id, match_id)
        
        text = f"""
‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}
üî∞ –°—Ç–∞—Ç—É—Å: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω

‚úÖ –í–∞—à —Å—á–µ—Ç: {user_bet[3]}
üìÖ –î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {user_bet[4]}
        """
        await message.answer(
            text,
            reply_markup=get_back_inline_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await state.finish()

async def submit_score_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—á–µ—Ç
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ üëÜ")

async def user_tournament_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    tournament_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    tournament = db.get_tournament(tournament_id)
    matches = db.get_tournament_matches(tournament_id)
    
    if tournament:
        if matches:
            text = f"üèÜ –ú–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament[1]}\n\n"
            if tournament[2]:  # –æ–ø–∏—Å–∞–Ω–∏–µ
                text += f"üìù {tournament[2]}\n\n"
            
            for match in matches:
                text += f"üìÖ {match[2]} {match[3]} - {match[4]} vs {match[5]}\n\n"
        else:
            text = f"üèÜ –í —Ç—É—Ä–Ω–∏—Ä–µ '{tournament[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.\n\n"
            if tournament[2]:  # –æ–ø–∏—Å–∞–Ω–∏–µ
                text += f"üìù {tournament[2]}\n\n"
            text += "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_user_tournament_matches_keyboard(tournament_id, matches)
        )
    else:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def user_match_detail_callback(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    match_id = int(callback.data.split('_')[2])
    
    db = DatabaseHandler('users.db')
    match = db.get_match(match_id)
    
    if match:
        tournament = db.get_tournament(match[1])
        user_bet = db.get_user_bet(callback.from_user.id, match_id)
        
        if user_bet:
            # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–≤–∫–µ
            text = f"""
‚öΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}
üî∞ –°—Ç–∞—Ç—É—Å: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω

‚úÖ –í–∞—à —Å—á–µ—Ç: {user_bet[3]}
üìÖ –î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {user_bet[4]}
            """
            await callback.message.edit_text(
                text,
                reply_markup=get_back_inline_keyboard()
            )
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å—á–µ—Ç
            text = f"""
‚öΩ –í–≤–æ–¥ —Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞:

üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament[1]}
üìÖ –î–∞—Ç–∞: {match[2]}
‚è∞ –í—Ä–µ–º—è: {match[3]}
‚öîÔ∏è –ú–∞—Ç—á: {match[4]} vs {match[5]}

–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1):
            """
            
            async with state.proxy() as data:
                data['match_id'] = match_id
                data['match_info'] = f"{match[4]} vs {match[5]}"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_match_bet_keyboard(match_id)
            )
            await UserBetStates.waiting_for_score.set()
    else:
        await callback.answer("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

async def help_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üì± **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:** –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω, –§–ò–û –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏
üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –º–∞—Ç—á–µ–π
‚öΩ **–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:** –í–≤–æ–¥ —Å—á–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
üìã **–ú–æ–∏ —Å—Ç–∞–≤–∫–∏:** –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
üìû **–û –Ω–∞—Å:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏

üìù **–§–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç X-Y (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2-1)
    """
    await callback.message.edit_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_back_inline_keyboard()
    )

async def about_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    
    about_text = """
üìû **–û –Ω–∞—Å**

–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤. 

üéØ **–ù–∞—à–∞ –º–∏—Å—Å–∏—è:** –°–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø—Ä–æ—Å—Ç—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.

üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç—ã.

‚öΩ **–°—Ç–∞–≤–∫–∏:** –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π.

üìß **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
Email: info@example.com
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
    """
    await callback.message.edit_text(
        about_text,
        parse_mode='Markdown',
        reply_markup=get_back_inline_keyboard()
    )

async def submit_match_score_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –∏–∑ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—á–µ—Ç
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ üëÜ")

def register_callback_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–ª–±—ç–∫–æ–≤"""
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.register_callback_query_handler(main_menu_callback, lambda c: c.data == "main_menu", state="*")
    
    # –ü—Ä–æ—Ñ–∏–ª—å
    dp.register_callback_query_handler(profile_callback, lambda c: c.data == "profile", state="*")
    dp.register_callback_query_handler(my_profile_callback, lambda c: c.data == "my_profile", state="*")
    dp.register_callback_query_handler(my_bets_callback, lambda c: c.data == "my_bets", state="*")
    dp.register_callback_query_handler(bets_tournament_detail_callback, lambda c: c.data.startswith("bets_tournament_"), state="*")
    dp.register_callback_query_handler(change_username_callback, lambda c: c.data == "change_username", state="*")
    dp.register_callback_query_handler(change_fullname_callback, lambda c: c.data == "change_fullname", state="*")
    
    # –¢—É—Ä–Ω–∏—Ä—ã –∏ —Å—Ç–∞–≤–∫–∏
    dp.register_callback_query_handler(tournaments_callback, lambda c: c.data == "tournaments", state="*")
    dp.register_callback_query_handler(make_bet_callback, lambda c: c.data == "make_bet", state="*")
    dp.register_callback_query_handler(bet_match_callback, lambda c: c.data.startswith("bet_match_"), state="*")
    dp.register_callback_query_handler(submit_score_callback, lambda c: c.data.startswith("submit_score_"), state="*")
    dp.register_callback_query_handler(submit_match_score_callback, lambda c: c.data.startswith("submit_match_score_"), state="*")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    dp.register_callback_query_handler(user_tournament_detail_callback, lambda c: c.data.startswith("user_tournament_"), state="*")
    dp.register_callback_query_handler(user_match_detail_callback, lambda c: c.data.startswith("user_match_"), state="*")
    
    # –î—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    dp.register_callback_query_handler(help_callback, lambda c: c.data == "help", state="*")
    dp.register_callback_query_handler(about_callback, lambda c: c.data == "about", state="*")
    
    # FSM –¥–ª—è —Å—Ç–∞–≤–æ–∫
    dp.register_message_handler(process_score_message, state=UserBetStates.waiting_for_score)